<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="SearchViewTemplate" viewtype="Asset" description=""/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/**
*  Search View Template
*  @FileName 	SearchViewTemplate.xviewgen
*  @Creator 	Kim Dae Won
*  @CreateDate 	2021.04.29
*  @Desction    조회조건영역 생성 템플릿
*  @version		1.0.0.0
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2021.04.29     		Kim Dae Won       	    최초 생성
*******************************************************************************
*/
/************************************************************************************************
 * include 선언부
 ************************************************************************************************/
include "view_lib::util.xjs";
include "view_lib::common.xjs";
/************************************************************************************************
 * 변수 선언 영역
 ************************************************************************************************/
//////////////////////////////Constant Setting  START ////////////////////////////////////////////////////
//Field Default Width
this.FIELD_WIDTH					= "110px";

//Field Default Height
this.FIELD_HEIGHT					= "40px";

//Label Default Width
this.LABEL_WIDTH					= 100;

//Lookup Button Default Width
this.SEARCH_BUTTON_WIDTH			= 110;

//Lookup Button Default Height
this.SEARCH_BUTTON_HEIGHT			= 40;

//Lookup Button Padding
this.SEARCH_BUTTON_PADDING_LEFT		= 5;
this.SEARCH_BUTTON_PADDING_TOP		= 5;
this.SEARCH_BUTTON_PADDING_RIGHT	= 5;
this.SEARCH_BUTTON_PADDING_BOTTOM	= 5;

//Lookup Button Default Text
this.SEARCH_BUTTON_TEXT				= "Search";

//Lookup Button Default Form
this.SEARCH_BUTTON_TYPE				= "bottom";

//Component Default Type
this.COMP_TYPE						= "edit";

//Label Default Type
this.LABEL_TYPE						= "static";

//Label Padding
this.LABEL_PADDING_LEFT				= 5;
this.LABEL_PADDING_TOP				= 5;
this.LABEL_PADDING_RIGHT			= 0;
this.LABEL_PADDING_BOTTOM			= 5;

//Component Padding
this.COMP_PADDING_LEFT				= 5;
this.COMP_PADDING_TOP				= 5;
this.COMP_PADDING_RIGHT				= 5;
this.COMP_PADDING_BOTTOM			= 5;

//Gap Between Components (Left and Right)
this.COMP_SPACE						= 5;

//Gap Between Components (Top and Bottom)
this.LINE_SPACE						= 5;

//Component Default CSS Class
this.COMP_CSSCLASS					= "";

//Label Default CSS Class
this.LABEL_CSSCLASS					= "sta_label";

//Lookup Button Css Class
this.SEARCH_BUTTON_CSSCLASS			= "btn_search";

//Background Static Css Class
this.SEARCH_BG_CSSCLASS				= "sta_searchbox";

//컴포넌트 사용여부
this.USE_COMP						= "true";
//////////////////////////////Constant Setting  END ////////////////////////////////////////////////////
/*============================================================================================*
* Parameter Structure Example

1. 'fieldarray' structure example
{
    "modelinfo":
    {
        "serviceid":"model_sample",                                // model service id
        "serviceurl":"http://127.0.0.1:8983/app/addSearchApi.do?"  // model service url
    },
    "fieldcount" : "2",                                            // number of fields in model
    "fields" :
    [
        {                                                          // About the first field
            "id": "company",
            "label": "Company Name",
            "fieldtype": "SelectOne",
            "datatype": "STRING",
            "datasize": "80",
            "editable": "true",
            "uselabel": "true"
        },
        {                                                          // About the second field
            "id": "department",
            "label": "Department Name",
            "fieldtype": "SelectOne",
            "datatype": "STRING",
            "datasize": "80",
            "editable": "true",
            "uselabel": "true"
        }
    ]
}

2. 'generationattr' structure example
{                                                                  // user-entered attributes for 'view' generation
  "attributes": {
    "use_triggerbutton": "true"
    "triggerbuttontext": "Search"
  }
}

3. 'contents' structure example
// --- design source of xfdl --- //
//   <View id="View00" viewtype="FreeForm" taborder="2" ... >
//     <Layouts>
//       <Layout>
//         <Static id="Static00" text="Company Name" left="0" .../>
//         <Combo id="Combo00" left="85" top="0" .../>
//         <Button id="btn_Trigger" left="617" top="5" .../>
//         ...
//       </Layout>
//     </Layouts>
//     <InitValue>
//       <Combo id="Combo00" enable="true"/>
//     </InitValue>
//     <Objects>
//       <Dataset id="Viewdataset">
//         <ColumnInfo>
//           <Column id="company" type="BLOB" size="80"/>
//           <Column id="department" type="BLOB" size="80"/>
//         </ColumnInfo>
//         <Rows>
//           <Row/>
//         </Rows>
//       </Dataset>
//     </Objects>
//     <Bind>
//       <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>
//     </Bind>
//     <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>
//   </View>

// --- design source converted to json format --- //
{
    "View": {                                                     // <View id="View00" viewtype="FreeForm" taborder="2" ... />
        "tag": "View",
        "referenceinfo": {
            "realwidth": "500",                                   // Real width of view component
            "realheight": "250"                                   // Real height of view component
        },
        "attribute": {
            "id": "View00",                                       // 'ID' of view component
            "viewtype": "FreeForm",                               // 'viewtype' property value of view component
            "taborder": "2",                                      // 'taborder' property value of view component
            "text": "search view",                                // 'text' property value of view component
            "left": "0",                                          // 'left' property value of view component
            "top": "0",                                           // 'top' property value of view component
            "width": "100%",                                      // 'width' property value of view component
            "height": "50%"                                       // 'height' property value of view component
        },
        "Model": [                                                // Information of components generated by each model field information.
            {                                                     // "fieldid" : "value" => The component generated by the field of Model
                "fieldid": "company",                             // "fieldid" : ""      => The component generated without the field of Model
                "Components": [                                   // The component information generated by the 'company' field.
                    {                                             //   <Static id="Static00" text="Company Name" left="0" .../>
                        "tag": "Static",
                        "attribute": {
                            "id": "Static00",
                            "text": "Company Name",
                            "left": "0",
                            "top": "0",
                            "width": "80",
                            "height": "20",
                        }
                    },
                    {                                             //   <Combo id="Combo00" left="85" top="0" .../>
                        "tag": "Combo",
                        "attribute": {
                            "id": "Combo00",
                            "left": "85",
                            "top": "0",
                            "width": "100",
                            "height": "24",
                        }
                    }
                ]
            },
            {   // with field
                "fieldid": "department",                          // "fieldid" : "value" => The component generated by the field of Model
                "Components": [
                ...
                ]
            },
            {
                "fieldid": "",                                    // "fieldid" : ""      => The component generated without the field of Model
                "Components": [
                    {                                             //   <Button id="btn_Trigger" left="617" top="5" .../>
                        "tag": "Button",
                        "attribute": {
                          "id": "btn_Trigger",
                          "left": "617",
                          "top": "5",
                          "width": "70",
                          "height": "50",
                          "text": "Search"
                        }
                    }
                ]
            }
        ],
        "InitValue": [
          {                                                       //   <InitValue>
            "tag": "InitValue",                                   //     <Combo id="Combo00" enable="true"/>
            "InitValue": [                                        //   </InitValue>
              {
                "tag": "Combo",
                "attribute": {
                  "id": "Combo00",
                  "enable": "true"
                }
              }
            ]
          }
        ],
        "Objects": [
          {                                                       //   <Objects>
            "tag": "Objects",                                     //     <Dataset id="Viewdataset">
            "Objects": [                                          //       <ColumnInfo>
              {                                                   //         <Column id="company" type="BLOB" size="80"/>
                "tag": "Dataset",                                 //         <Column id="department" type="BLOB" size="80"/>
                "attribute": {                                    //       </ColumnInfo>
                  "id": "viewdataset"                             //       <Rows>
                },                                                //         <Row/>
                "Dataset": [                                      //       </Rows>
                  {                                               //     </Dataset>
                    "tag": "ColumnInfo",                          //   </Objects>
                    "ColumnInfo": [
                      {
                        "tag": "Column",
                        "attribute": {
                          "id": "company",
                          "type": "BLOB",
                          "size": "80"
                        }
                      },
                      {
                        "tag": "Column",
                        "attribute": {
                          "id": "department",
                          "type": "BLOB",
                          "size": "80"
                        }
                      }
                    ]
                  },
                  {
                    "tag": "Rows",
                    "Rows": [
                      {
                        "tag": "Row"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Bind": [
        {                                                         //   <Bind>
          "tag": "Bind",                                          //     <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>
          "Bind": [                                               //   </Bind>
              {
                "tag": "BindItem",
                "attribute": {
                  "id": "item0",
                  "compid": "Combo00",
                  "propid": "value",
                  "datasetid": "viewdataset",
                  "columnid": "company"
                }
              }
            ]
          }
        ],
        "Script": {                                               // <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>
            "tag": "Script",
            "attribute": {
                "type": "xscript5.1"
            },
            "value": "this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}"
        }
    }
}
*============================================================================================*/
/************************************************************************************************
 * Nexacro Studio 호출 필수 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   :
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr)
{
    //Return Value
    var vResult = "";

    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);

    //Make Generation Info
	//this.oFieldArray : Model Information as JSON Object
	//this.oContents : View Component Information as JSON Object
	//this.oContents.View.Model : Model Information Initialization
	//this.oGenerationAttr : Setting Information as JSON Object
	//this.oUseFieldArray : Use Model Information as JSON Object
	this.lfn_MakeGenerationInfo(fieldarray, contents, generationattr, true);

	//Load Model Information Generation Function
	fn_GetModel();

	//Load InitValue Information Generation Function
    this.oContents.View.InitValue = fn_GetInitValue();

	//Load Object Information Generation Function
    this.oContents.View.Objects = fn_GetObjects();

	//Load BindInfo Information Generation Function
    this.oContents.View.Bind = fn_GetBind();

	//Load Script Information Generation Function
    this.oContents.View.Script = fn_GetScript();

	//Convert View Component Information into String
    vResult = JSON.stringify(this.oContents, null, "\t");

    //trace(">> vResult : " + vResult);
    //Return View Component Information
    return vResult;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function()
{
    var sViewAttr = "";
    var oViewAttr = {
                        "attributes": [
                            {
                                "id": "direction",
                                "edittype": "Enum",
                                "defaultvalue": "horizontal",
								"enumlist" : ["horizontal", "vertical"],
                                "description": "Set the Field Production Direction."
                            },
							{
                                "id": "halign",
                                "edittype": "Enum",
                                "defaultvalue": "left",
								"enumlist" : ["left", "center", "right"],
                                "description": "Set the Field  Horizontal Alignment."
                            },
							{
                                "id": "valign",
                                "edittype": "Enum",
                                "defaultvalue": "top",
								"enumlist" : ["top", "middle", "bottom"],
                                "description": "Set the Field Vertical Alignment."
                            },
							{
                                "id": "searchbuttontype",
                                "edittype": "Enum",
                                "defaultvalue": this.SEARCH_BUTTON_TYPE,
								"enumlist" : ["none", "top", "middle", "bottom", "full"],
                                "description": "Set the Lookup Button Form."
                            },
							{
                                "id": "searchbuttontext",
                                "edittype": "String",
                                "defaultvalue": this.SEARCH_BUTTON_TEXT,
								"description": "Search Button Text"
                            },
							{
                                "id": "searchbuttoncssclass",
                                "edittype": "String",
                                "defaultvalue": this.SEARCH_BUTTON_CSSCLASS,
								"description": "Search Button CSS Class Id"
                            },
							{
                                "id": "searchbgcssclass",
                                "edittype": "String",
                                "defaultvalue": this.SEARCH_BG_CSSCLASS,
								"description": "Search Backgroudn Static CSS Class Id"
                            },
							{
                                "id": "format",
                                "edittype": "layout",
								"defaultvalue": "",
								"description": "Set the View Layout"

                            }
                        ]
                  };

	oViewAttr["attributecount"] = oViewAttr["attributes"].length;

	sViewAttr = JSON.stringify(oViewAttr, null, "\t");
    return sViewAttr;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
	var sFieldAttr = "";
	var oFieldAttr = {
                        "attributes": [
                            {
                                "id": "comptype",
                                "edittype": "Enum",
								"enumlist" : ["button", "combo", "edit", "maskedit", "textarea", "static", "radio", "checkbox", "spin", "calendar", "imageviewer", "progressbar"],
                                "defaultvalue": this.COMP_TYPE,
                                "description": "Types of Components to be Expressed"
                            },
							{
                                "id": "fieldwidth",
                                "edittype": "String",
								"defaultvalue": this.FIELD_WIDTH,
                                "description": "Field Width(px or %)"
                            },
							{
                                "id": "fieldheight",
                                "edittype": "String",
								"defaultvalue": this.FIELD_HEIGHT,
                                "description": "Field Height(px or %)"
                            },
							{
                                "id": "labelwidth",
                                "edittype": "Number",
								"defaultvalue": this.LABEL_WIDTH,
                                "description": "Label Width(px)"
                            },
							{
                                "id": "cssclass",
                                "edittype": "String",
								"defaultvalue": this.COMP_CSSCLASS,
                                "description": "Component CSS Class"
                            },
							{
                                "id": "labelcssclass",
                                "edittype": "String",
								"defaultvalue": this.LABEL_CSSCLASS,
                                "description": "Label CSS Class"
                            },
							{
                                "id": "usecomp",
                                "edittype": "Boolean",
								"defaultvalue": this.USE_COMP,
                                "description": "Use Component"
                            }
                        ]
                  };

	oFieldAttr["attributecount"] = oFieldAttr["attributes"].length;

 	sFieldAttr = JSON.stringify(oFieldAttr, null, "\t");
    return sFieldAttr;
}

/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    :
 * Return       :
 * Description  : Model Information Production Function
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function()
{

	//Import View Component Width Value
	var nViewCompWidth = this.oContents.View.referenceinfo.realwidth;

	//Import View Component Height Value
	var nViewCompHeight = this.oContents.View.referenceinfo.realheight;

	//Load Lookup Area Background Static Production Function
	fn_MakeSearchBackgroundStatic();

	//When the Lookup Button Type is Not None
	if(this.oGenerationAttr.attributes.searchbuttontype!="none")
	{
		//Load Lookup Button Production Function
		fn_MakeSearchButton(nViewCompWidth, nViewCompHeight);

		//Set area excluding lookup button area as component production area
		nViewCompWidth = nViewCompWidth - this.SEARCH_BUTTON_WIDTH - this.SEARCH_BUTTON_PADDING_LEFT - this.SEARCH_BUTTON_PADDING_RIGHT;
	}

	//If the format properties are set, produce component-based on layout rules
	if(this.oGenerationAttr.attributes.format)
	{
		//Import Layout Information
		var oLayout = this.oGenerationAttr.attributes.format;

		//Load Layout Calculation Function
		fn_CalcLayout(oLayout, nViewCompWidth, nViewCompHeight);

		//Load Layout-based Component Production Function
		fn_MakeCompByLayout(oLayout);
	}
	//If the format properties are not set, create components based on basic rules
	else
	{
		//Import Field Information
		var arrFieldList = this.oUseFieldArray.fields;

		//Import Component Production Direction Information
		var sDirection = this.oGenerationAttr.attributes.direction;

		//Import Component Horizontal Alignment Information
		var sHAlign = this.oGenerationAttr.attributes.halign;

		//Import Component Vertical Alignment Information
		var sVAlign = this.oGenerationAttr.attributes.valign;

		//Load Component Location Calculation Information
		var arrFieldPosition = fn_CalcField(sDirection, sVAlign, sHAlign, nViewCompWidth, nViewCompHeight, false);

		//Load Component Production Function
		fn_MakeComp(0, 0, nViewCompWidth, nViewCompHeight, sDirection, arrFieldPosition, false, true);
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeSearchBackgroundStatic
 * Parameter    :
 * Return       :
 * Description  : Lookup Area Background Production Function
 *---------------------------------------------------------------------------------------------*/
fn_MakeSearchBackgroundStatic = function()
{
	//Import Background Static CSS Class Information
	var sSearchBgCssClass = this.oGenerationAttr.attributes.searchbgcssclass;

	var oModel = this.oContents.View.Model;
	var oField;
	var oComp;

	var nCompTop;
	var nCompRigth;
	var nCompWidth;
	var nCompHeight;
	var nCompBottom;

	//Add Background Static Component Tag
	oModel[oModel.length] =
	{
		"fieldid" : "",
		"Components" :
		[{
			"tag" : "Static",
			"attribute" :
			{
				"id" : "stBg", "left" : "0", "top" : "0", "right" : "0", "bottom" : "0",
				"cssclass" : sSearchBgCssClass
			}
		}]
	};
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeSearchButton
 * Parameter    : nViewCompWidth : View Component Width Value
				  nViewCompHeight : View Component Height Value
 * Return       :
 * Description  : Lookup Button Creation Function
 *---------------------------------------------------------------------------------------------*/
fn_MakeSearchButton = function(nViewCompWidth, nViewCompHeight)
{
	//Import Lookup Button Form Information (none, top, middle, bottom, full)
	var sSearchButtonType = this.oGenerationAttr.attributes.searchbuttontype;

	//Import Lookup Button CSS Class Information
	var sSearchButtonCssClass = this.oGenerationAttr.attributes.searchbuttoncssclass;

	//Import Lookup Button Text Information
	var sSearchButtonText = this.oGenerationAttr.attributes.searchbuttontext;

	var oModel = this.oContents.View.Model;
	var oField;
	var oComp;

	var nCompTop;
	var nCompRigth;
	var nCompWidth;
	var nCompHeight;
	var nCompBottom;

	//Create Field Tag
	oField = {"fieldid" : "", "Components" : []};

	//If the lookup button creation location is top
	if(sSearchButtonType=="top")
	{
		nCompTop = this.SEARCH_BUTTON_PADDING_TOP;
		nCompRight = this.SEARCH_BUTTON_PADDING_RIGHT;
		nCompWidth = this.SEARCH_BUTTON_WIDTH - this.SEARCH_BUTTON_PADDING_LEFT - this.SEARCH_BUTTON_PADDING_RIGHT;
		nCompHeight = this.SEARCH_BUTTON_HEIGHT - this.SEARCH_BUTTON_PADDING_TOP - this.SEARCH_BUTTON_PADDING_BOTTOM;

		oField.Components[0] =
		{
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnSearch", "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "right" : nCompRight,
				"cssclass" : sSearchButtonCssClass,
				"text" : sSearchButtonText
			}
		};
	}
	//If the lookup button creation location is middle
	else if(sSearchButtonType=="middle")
	{
		nCompTop = nViewCompHeight/2 - ((this.SEARCH_BUTTON_HEIGHT + this.SEARCH_BUTTON_PADDING_TOP + this.SEARCH_BUTTON_PADDING_BOTTOM)/2);
		nCompRight = this.SEARCH_BUTTON_PADDING_RIGHT;
		nCompWidth = this.SEARCH_BUTTON_WIDTH - this.SEARCH_BUTTON_PADDING_LEFT - this.SEARCH_BUTTON_PADDING_RIGHT;
		nCompHeight = this.SEARCH_BUTTON_HEIGHT - this.SEARCH_BUTTON_PADDING_TOP - this.SEARCH_BUTTON_PADDING_BOTTOM;

		oField.Components[0] =
		{
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnSearch", "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "right" : nCompRight,
				"cssclass" : sSearchButtonCssClass,
				"text" : sSearchButtonText
			}
		};
	}
	//If the lookup button creation location is bottom
	else if(sSearchButtonType=="bottom")
	{
		nCompRight = this.SEARCH_BUTTON_PADDING_RIGHT;
		nCompBottom = this.SEARCH_BUTTON_PADDING_BOTTOM;
		nCompWidth = this.SEARCH_BUTTON_WIDTH - this.SEARCH_BUTTON_PADDING_LEFT - this.SEARCH_BUTTON_PADDING_RIGHT;
		nCompHeight = this.SEARCH_BUTTON_HEIGHT - this.SEARCH_BUTTON_PADDING_TOP - this.SEARCH_BUTTON_PADDING_BOTTOM;

		oField.Components[0] =
		{
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnSearch", "width" : nCompWidth, "height" : nCompHeight, "right" : nCompRight, "bottom" : nCompBottom,
				"cssclass" : sSearchButtonCssClass,
				"text" : sSearchButtonText
			}
		};
	}
	//If the lookup button creation location is full
	else
	{
		nCompTop = this.SEARCH_BUTTON_PADDING_TOP;
		nCompRight = this.SEARCH_BUTTON_PADDING_RIGHT;
		nCompWidth = this.SEARCH_BUTTON_WIDTH - this.SEARCH_BUTTON_PADDING_LEFT - this.SEARCH_BUTTON_PADDING_RIGHT;
		nCompBottom = this.SEARCH_BUTTON_PADDING_BOTTOM;

		oField.Components[0] =
		{
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnSearch", "top" : nCompTop, "width" : nCompWidth, "right" : nCompRight, "bottom" : nCompBottom,
				"cssclass" : sSearchButtonCssClass,
				"text" : sSearchButtonText
			}
		};
	}

	//Add Lookup Button Tag
	oModel[oModel.length] = oField;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcLayout
 * Parameter    :
				- oLayout : Layout Setting Information
				- nViewCompWidth : View Component Real Width
				- nViewCompHeight : View Component Real Height
 * Return       :
 * Description  : Layout Calculation Information
 *---------------------------------------------------------------------------------------------*/
fn_CalcLayout = function(oLayout, nViewCompWidth, nViewCompHeight)
{
	//CellList Information set on Layout
	var arrCellList = oLayout.celllist;

	//ColumnSize Information set on Layout
	var arrColSize = oLayout.columnsize;

	//RowSize Information set on Layout
	var arrRowSize = oLayout.rowsize;

	//CellList Quantity
	var nCellCnt = arrCellList.length;

	//The Sum of Column/Row Sizes that were not set at -1
	var nAllColSize = 0;
	var nAllRowSize = 0;

	//Quantity of Column/Row Size set at -1
	var nNoColSizeCnt = 0;
	var nNoRowSizeCnt = 0;

	//Replacement Size if Column/Row Size is -1
	var nColSizeDef = 0;
	var nRowSizeDef = 0 ;

	var oCell;
	var sDirection, sVAlign, sHAlign;
	var nCol, nRow, nColSpan, nRowSpan;
	var nColSize, nRowSize;

	var nFieldWidth;
	var nFieldWidthType;
	var nFiledWidthMax;
	var nFieldHeight;
	var nFieldHeightType;
	var nFieldHeightMax;

	//Evaluate Sum of Column Sizes that are not set at -1
	nAllColSize = arrColSize.reduce(function (pre, value){
		if(value==-1)return pre;
		else return pre + value;
	});

	//Evaluate Sum of Row Sizes that are not set at -1
	nAllRowSize = arrRowSize.reduce(function (pre, value){
		if(value==-1)return pre;
		else return pre + value;
	});

	if(nAllColSize==-1)nAllColSize = 0;

	if(nAllRowSize==-1)nAllRowSize = 0;

	//Evaluate Quantity of Column/Rows set at -1
	nNoColSizeCnt = arrColSize.filter(arrColSize=>arrColSize==-1).length;
	nNoRowSizeCnt = arrRowSize.filter(arrRowSize=>arrRowSize==-1).length;

	//If there are Column/Rows set at -1
	//(View Component Size -(The Sum of Column/Row Sizes not set at -1))/Number of Column/Rows set at -1
	if(nNoColSizeCnt>0)nColSizeDef = (nViewCompWidth - nAllColSize)/nNoColSizeCnt;
	if(nNoRowSizeCnt>0)nRowSizeDef = (nViewCompHeight - nAllRowSize)/nNoRowSizeCnt;

	//Save Default Column/Row Size on Layout
	oLayout.colsizedef = nColSizeDef;
	oLayout.rowsizedef = nRowSizeDef;

	//Evaluate the Field Location Value of each Cell
	for(var i=0;i<nCellCnt;i++)
	{
		//Import Information set on Cell
		oCell = arrCellList[i];
		sDirection = oCell.direction;
		sVAlign = oCell.valign;
		sHAlign = oCell.halign;
		nCol = nexacro.toNumber(oCell.col);
		nRow = nexacro.toNumber(oCell.row);
		nColSpan = nexacro.toNumber(oCell.colspan);
		nRowSpan = nexacro.toNumber(oCell.rowspan);

		//Initialize to 1 if there are no Col/RowSpan Values
		if(!nColSpan)nColSpan = 1;
		if(!nRowSpan)nRowSpan = 1;

		//Evaluate the Width/Height of that Cell
		nColSize = this.lfn_GetCellSize(oLayout.columnsize, nCol, nColSpan, nColSizeDef);
		nRowSize = this.lfn_GetCellSize(oLayout.rowsize, nRow, nRowSpan, nRowSizeDef);

		//Save the Width/Height Value on that Cell
		oCell.realcolsize = nColSize;
		oCell.realrowsize = nRowSize;

		//If there are fields connected to that Cell
		if(oCell.fieldlist)
		{
			//Evaluate the Field Location Value to input on that Cell
			oCell.fieldposition = fn_CalcField(sDirection, sVAlign, sHAlign, nColSize, nRowSize, true, oCell.fieldlist);
		}
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcField
 * Parameter    :
				- sDirection : Component Production Direction
				- sVAlign : Component Vertical Alignment Method(top|middle|bottom)
				- sHAlign : Component Horizontal Alignment Method(left|center|right)
				- nColSize : The Width of The Cell to be Expressed
				- nRowSize : The Height of The Cell to be Expressed
				- bUseLayout : Whether Layout was used
				- arrFieldInCellList : Field List connect to the Cell
 * Return       : arrFieldPosition : Object Array with Field Location Information
 * Description  : Function to Evaluate the Field Location Value to be Expressed
 *---------------------------------------------------------------------------------------------*/
fn_CalcField = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize, bUseLayout, arrFieldInCellList)
{
	var nLeft = 0;
	var nTop = 0;
	var nRowIdx = 0;
	var nColIdx = 0;
	var nFiledWidthMax = 0;
	var nFiledHeightMax = 0;

	var nStartX, nStartY;
	var nEndX, nEndX;
	var nTemp;

	//Import Field List Registered to the Model
	var arrFieldList = this.oUseFieldArray.fields;

	//Number of Fields connected to the Cell
	var nFieldInCellCnt;

	//Object Array to save the Field Location Information
	var arrFieldPosition = [];

	//Col Size without the Label Area
	var nRealColSize;

	//Label Width
	var nLabelWidth;

	//If Layout was used, check the quantity via the field list connected to the cell
	if(bUseLayout==true)nFieldInCellCnt = arrFieldInCellList.length;

	//If Layout was not used, check the quantity through the number of field list registered to the model
	else nFieldInCellCnt = arrFieldList.length;

	//If the Component Production Direction is Horizontal
	//Choose Array, as the x-coordinate for each row is different
	//Choose Number, as the y-coordinate for each column is identical
	if(sDirection=="horizontal")
	{
		var arrAlignX = [];
		var nAlignY;
	}
	//If the Component Production Direction is Vertical
	//Choose Number, as the x-coordinate for each row is identical
	//Choose Array, as the y-coordinate for each column is different
	else
	{
		var nAlignX;
		var arrAlignY = [];
	}

	for(var j=0;j<nFieldInCellCnt;j++)
	{
		//If Layout was used
		//Import Field Information registered on the Model based on the Fields connected to the Cell
		if(bUseLayout==true)
		{
			sFieldId =  arrFieldInCellList[j];
			oField = arrFieldList.filter(arrFieldList=>arrFieldList.id==sFieldId)[0];
		}
		//If Layout was not used
		//Import Field Information registered on the Model
		else
		{
			oField = arrFieldList[j];
			sFieldId = oField.id;
		}

		//Import Label Width Information set on the current Field
		nLabelWidth = nexacro.toNumber(oField.labelwidth);

		//Evaluate the Col Size excluding the Label Area
		nRealColSize = nColSize - nLabelWidth;

		//Evaluate the Width/Height Value where the Field will be expressed
		nFieldWidth = this.lfn_GetRealSize(oField.fieldwidth, 0, nRealColSize, this.FIELD_WIDTH, 0, 0);
		nFieldHeight = this.lfn_GetRealSize(oField.fieldheight, 0, nRowSize, this.FIELD_HEIGHT, 0, 0);

		//If the Component Production Direction is Horizontal
		if(sDirection=="horizontal")
		{

			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
			if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx, (this.LABEL_PADDING_LEFT+this.COMP_PADDING_RIGHT), this.COMP_SPACE, true);
			else nTemp = 0;

			//Start a new line if the Field exceeds the Cell Width
			if(nLeft+nLabelWidth+nFieldWidth-nTemp>nColSize)
			{
				//The Right value of the Field located on the last row
				nEndX = nLeft;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace("Col", nColIdx, nColIdx-1, (this.LABEL_PADDING_LEFT+this.COMP_PADDING_RIGHT), this.COMP_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this row
				arrAlignX[nRowIdx] = this.lfn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));

				//Create the starting Left/Top Coordinates of the next row
				//Set the Bottom value of the Field with the largest Height of this Row as the Top value of the next row
				nTop += nFiledHeightMax;

				//Initialize the Left Coordinate
				nLeft = 0;

				//Initialize the largest Height Value
				nFiledHeightMax = 0;

				//Initialize the Col Index
				nColIdx = 0;

				//Increase Row Index
				nRowIdx++;

			}

			//Evaluate the largest Height Value
			if(nFieldHeight>nFiledHeightMax)nFiledHeightMax = nFieldHeight;
		}
		//If the Component Production Direction is Vertical
		else
		{
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
			if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace("Row", nColIdx+1, nColIdx, (this.LABEL_PADDING_TOP+this.LABEL_PADDING_BOTTOM), this.LINE_SPACE, true);
			else nTemp = 0;

			//Start a new line if the Field exceeds the Cell Height
			if(nTop+nFieldHeight-nTemp>nRowSize)
			{
				//The Bottom Value of the last Field of this row
				nEndY = nTop;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace("Row", nColIdx, nColIdx-1, (this.LABEL_PADDING_TOP+this.LABEL_PADDING_BOTTOM), this.LINE_SPACE, true);
				else nTemp = 0;

				//Evaluate the VAlign Starting Location Value of this row
				arrAlignY[nRowIdx] = this.lfn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));

				//Create the starting Left/Top Coordinates of the next row
				//Set the right value of the field with the largest width of this row as the left value of the next Row
				nLeft += nFiledWidthMax + nLabelWidth;

				//Initialize Top Coordinate
				nTop = 0;

				//Initialize the largest Width Value
				nFiledWidthMax = 0;

				//Initialize the Col Index
				nColIdx = 0;

				//Increase Row Index
				nRowIdx++;
			}

			//Evaluate the largest Width Value
			if(nFieldWidth>nFiledWidthMax)nFiledWidthMax = nFieldWidth;
		}

		//Starting Left/Top Location Value of the Field
		if(j==0)
		{
			nStartX = nLeft;
			nStartY = nTop;
		}

		//If is it the last Field
		if(j==nFieldInCellCnt-1)
		{
			//If the Component Production Direction is Horizontal
			if(sDirection=="horizontal")
			{
				//The Right value of the Field located on the last row
				nEndX = nLeft + nLabelWidth + nFieldWidth;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx, (this.LABEL_PADDING_LEFT+this.COMP_PADDING_RIGHT), this.COMP_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this row
				arrAlignX[nRowIdx] = this.lfn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));

				//The Bottom Value of the Field with the largest Height until the last Field
				nEndY = nTop + nFiledHeightMax;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nRowIdx!=0)nTemp = this.lfn_CalcPaddingToSpace("Row", nRowIdx+1, nRowIdx, (this.LABEL_PADDING_TOP+this.LABEL_PADDING_BOTTOM), this.LINE_SPACE, true);
				else nTemp = 0;

				//Evaluate the VAlign Starting Location Value
				nAlignY = this.lfn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));
			}
			//If the Component Production Direction is Vertical
			else
			{
				//The Bottom Value of the last Field of this row
				nEndY = nTop+nFieldHeight;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace("Row", nColIdx+1, nColIdx, (this.LABEL_PADDING_TOP+this.LABEL_PADDING_BOTTOM), this.LINE_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this row
				arrAlignY[nRowIdx] = this.lfn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));

				//The Right Value of the Field with the largest Height until the last Field
				nEndX = nLeft + nFiledWidthMax + nLabelWidth;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nRowIdx!=0)nTemp = this.lfn_CalcPaddingToSpace("Col", nRowIdx+1, nRowIdx, (this.LABEL_PADDING_LEFT+this.COMP_PADDING_RIGHT), this.COMP_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this row
				nAlignX = this.lfn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));
			}
		}

		//Save the Field Location Information
		arrFieldPosition[j] =
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"width" : nFieldWidth,
			"height" : nFieldHeight,
			"rowidx" : nRowIdx,
			"colidx" : nColIdx,
			"alignx" : 0,
			"aligny" : 0
		};

		//Set the Left/Top Location Value of the next Field
		if(sDirection=="horizontal")nLeft += nFieldWidth + nLabelWidth;
		else nTop += nFieldHeight;

		//Increase Col Index
		nColIdx++;
	}

	//Save Align X/Y Value on the Field Location Information
	if(sDirection=="horizontal")
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = arrAlignX[nRowIdx];
			arrFieldPosition[i].aligny = nAlignY;
		}
	}else
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = nAlignX;
			arrFieldPosition[i].aligny = arrAlignY[nRowIdx];
		}
	}

	//Return Field Location Information
	return arrFieldPosition;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeCompByLayout
 * Parameter    :
				- oLayout : Layout Setting Information
 * Return       :
 * Description  : Layout-based Component Production Function
 *---------------------------------------------------------------------------------------------*/
fn_MakeCompByLayout = function(oLayout)
{
	//CellList Information set on Layout
	var arrCellList = oLayout.celllist;

	//ColumnSize Information set on Layout
	var arrColSize = oLayout.columnsize;

	//RowSize Information set on Layout
	var arrRowSize = oLayout.rowsize;

	//Import Column/Row Default Size
	var nColSizeDef = oLayout.colsizedef;
	var nRowSizeDef = oLayout.rowsizedef;

	var nCol, nRow, nColSpan, nRowSpan;
	var sDirection, sVAlign, sHAlign;
	var nWidth;
	var nHeight;

	var oCell;
	var oStatic;

	for(var i=0;i<arrCellList.length;i++)
	{
		oCell = arrCellList[i];
		sDirection = oCell.direction
		nCol = nexacro.toNumber(oCell.col);
		nRow = nexacro.toNumber(oCell.row);
		nColSpan = nexacro.toNumber(oCell.colspan);
		nRowSpan = nexacro.toNumber(oCell.rowspan);

		//Initialize to 1 if there are no Col/RowSpan Values
		if(!nColSpan)nColSpan = 1;
		if(!nRowSpan)nRowSpan = 1;

		//Continue if there are no Fields on the Cell
		if(!oCell.fieldlist)continue;

		//Import the Left/Top Location Value of the current Cell
		nLeft = this.lfn_GetCellSize(arrColSize, 0, nCol, nColSizeDef);
		nTop = this.lfn_GetCellSize(arrRowSize, 0, nRow, nColSizeDef);

		if(arrRowSize.length==nRow + nRowSpan)
		{
			fn_MakeComp(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition, true, true);
		}else
		{
			fn_MakeComp(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition, true, false);
		}
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeComp
 * Parameter    :
				- nBaseLeft : Reference Coordinate (Left) to create Component
				- nBaseTop : Reference Coordinate (Top) to create Component
				- nBaseWidth : Reference Coordinate (Width) to create Component
				- nBaseHeight : Reference Coordinate (Height) to create Component
				- sDirection : Component Production Direction
				- arrFieldPosition: Object Array with Field Location Information
				- bUseLayout : Whether Layout was used
				- bLastRow : Whether it is the last Row
 * Return       :
 * Description  : Component Tag Production Function
 *---------------------------------------------------------------------------------------------*/
fn_MakeComp = function(nBaseLeft, nBaseTop, nBaseWidth, nBaseHeight, sDirection, arrFields, bUseLayout, bLastRow)
{
	var nLabelLeft, nLabelTop, nLabelWidth, nLabelHeight;
	var nCompLeft, nCompTop, nCompWidth, nCompHeight;
	var nPosLeft, nPosTop, nPosWidth, nPosHeight;
	var nLabelAreaWidth;

	var oAlignPos;
	var sFieldId;
	var oField;
	var oFieldPosition;
	var nRowIdx, nColIdx;
	var nAlignX, nAlignY;

	var oModel = this.oContents.View.Model;
	var sCompId;
	var oLabelClass			= this.lfn_GetCompClass(this.LABEL_TYPE);
	var oCompClass;
	var sCompCssClass;
	var sLabelCssClass;

	if(!bUseLayout)bUseLayout = false;

	for(var i=0;i<arrFields.length;i++)
	{
		//Import Field Object
		oFieldPosition = arrFields[i];
		sFieldId = oFieldPosition.fieldid;
		oField = this.oUseFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];

		//Import Component Naming Rule Information
		oCompClass = this.lfn_GetCompClass(oField.comptype);

		//Import Component Css Class Id Value
		sCompCssClass = oField.cssclass;

		//Import Label Css Class Id Value
		sLabelCssClass = oField.labelcssclass;

		//Import Row/Col Index where the Field will be located
		nRowIdx = oFieldPosition.rowidx;
		nColIdx = oFieldPosition.colidx;

		//Import Align Location Information of the Field
		nAlignX = oFieldPosition.alignx;
		nAlignY = oFieldPosition.aligny;

		//Import Field Location Information
		nPosLeft = nexacro.toNumber(oFieldPosition.left);
		nPosTop = nexacro.toNumber(oFieldPosition.top);
		nPosWidth = nexacro.toNumber(oFieldPosition.width);
		nPosHeight = nexacro.toNumber(oFieldPosition.height);

		//Import Field Label Width Information
		nLabelAreaWidth = nexacro.toNumber(oField.labelwidth);

		//Calculate Left/Top Coordinate where Component will be located
		//Evaluate actual Component Location Information reflecting Align, Padding, Comp/Line Space, etc.
		//Label Left Coordinate = Cell Left + Field Left + HAlign Starting Coordinate
		nLabelLeft = nBaseLeft + nPosLeft + nAlignX;

		//Label Top Coordinate = Cell Top + Field Top + VAlign Starting Coordinate
		nLabelTop = nBaseTop + nPosTop + nAlignY;

		//Component Top Coordinate = Cell Top + Field Top + VAlign Starting Coordinate
		nCompTop = nBaseTop + nPosTop + nAlignY;

		if(sDirection=="horizontal")
		{
			if(nColIdx!=0)
			{
				//Label Left Coordinate = Label Left Coordinate - (Padding Value excluding the Left Padding of the first Label) + (Comp Space*Number of Components)
				nLabelLeft = nLabelLeft - (this.LABEL_PADDING_LEFT*(nColIdx)) - (this.COMP_PADDING_RIGHT*(nColIdx-1)) + (this.COMP_SPACE *nColIdx);
			}else
			{
				//Label Left Coordinate = Label Left Coordinate + Label Left Padding
				nLabelLeft = nLabelLeft + this.LABEL_PADDING_LEFT;
			}

			if(nRowIdx!=0)
			{
				//Label Top Coordinate = Label Top Coordinate - (Padding Value excluding the Top Padding of the first Label) + (Line Space*Number of Components)
				nLabelTop = nLabelTop - (this.LABEL_PADDING_TOP*(nRowIdx)) - (this.LABEL_PADDING_BOTTOM*nRowIdx) + (this.LINE_SPACE *nRowIdx);

				//Component Top Coordinate = Component Top Coordinate - (Padding Value excluding the Top Padding of the first Component) + (Line Space*Number of Components)
				nCompTop = nCompTop - (this.COMP_PADDING_TOP*(nRowIdx-1)) - (this.COMP_PADDING_BOTTOM*nRowIdx) + (this.LINE_SPACE *nRowIdx);
			}else
			{
				//Label Top Coordinate = Label Top Coordinate + Label Top Padding
				nLabelTop = nLabelTop + this.LABEL_PADDING_TOP;

				//Component Top Coordinate = Component Top Coordinate + Component Top Padding
				nCompTop = nCompTop + this.COMP_PADDING_TOP;
			}
		}else
		{
			if(nRowIdx!=0)
			{
				//Label Left Coordinate = Label Left Coordinate - (Padding Value excluding the Left Padding of the first Label) + (Comp Space*Number of Components)
				nLabelLeft = nLabelLeft - (this.LABEL_PADDING_LEFT*(nRowIdx-1)) - (this.COMP_PADDING_RIGHT*(nRowIdx-1)) + (this.COMP_SPACE *nRowIdx);
			}else
			{
				//Label Left Coordinate = Label Left Coordinate + Label Left Padding
				nLabelLeft = nLabelLeft + this.LABEL_PADDING_LEFT;
			}

			if(nColIdx!=0)
			{
				//Label Top Coordinate = Label Top Coordinate - (Padding Value excluding the Top Padding of the first Label) + (Line Space*Number of Components)
				nLabelTop = nLabelTop - (this.LABEL_PADDING_TOP*(nColIdx-1)) - (this.LABEL_PADDING_BOTTOM*nColIdx) + (this.LINE_SPACE *nColIdx);

				//Component Top Coordinate = Component Top Coordinate - (Padding Value excluding the Top Padding of the first Component) + (Line Space*Number of Components)
				nCompTop = nCompTop - (this.COMP_PADDING_TOP*(nColIdx-1)) - (this.COMP_PADDING_BOTTOM*nColIdx) + (this.LINE_SPACE *nColIdx);
			}else
			{
				//Label Top Coordinate = Label Top Coordinate + Label Top Padding
				nLabelTop = nLabelTop + this.LABEL_PADDING_TOP;

				//Component Top Coordinate = Component Top Coordinate + Component Top Padding
				nCompTop = nCompTop + this.COMP_PADDING_TOP;
			}
		}

		//Label Width = Label Area Width - Left/Right Padding
		nLabelWidth = nLabelAreaWidth - this.LABEL_PADDING_LEFT - this.LABEL_PADDING_RIGHT;

		//Label Height = Field Height - Top/Bottom Padding
		nLabelHeight = nPosHeight - this.LABEL_PADDING_TOP - this.LABEL_PADDING_BOTTOM

		//As the gap between the top and bottom of the label must overlap
		//Add 1px if it is not the last label
		if(bLastRow==false)nLabelHeight = nLabelHeight + 1;

		//Component Left Coordinate = Label Left Coordinate + Label Width + Label Right Padding + Component Left Padding
		nCompLeft = nLabelLeft + nLabelWidth + this.LABEL_PADDING_RIGHT + this.COMP_PADDING_LEFT;

		//Component Width = Field Width - Left/Right Padding
		nCompWidth = nPosWidth - this.COMP_PADDING_LEFT - this.COMP_PADDING_RIGHT;

		//Component Height = Field Height - Top/Bottom Padding
		nCompHeight = nPosHeight - this.COMP_PADDING_TOP - this.COMP_PADDING_BOTTOM;

		oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};

		//If the Label Width is not 0, Add Label Tag
		if(nLabelWidth>0)
		{
			sCompId = this.lfn_GetCompId(oLabelClass.prefix + "_" + sFieldId + "_" + "Label");
			oComp = {
						"tag" : oLabelClass.classId,
						"attribute" :
						{
							"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nLabelWidth, "height" : nLabelHeight
							, "text" : oField.label, "cssclass" : sLabelCssClass
						}
					};
			oModel[oModel.length-1].Components.push(oComp);
		}

		//Add Component Tag
		sCompId = this.lfn_GetCompId(oCompClass.prefix + "_" + sFieldId);
		oComp =	{
					"tag" : oCompClass.classId,
					"attribute" :
					{
						"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "cssclass" : sCompCssClass
					}
				};
		//If the Component Type is Button, add label text to the text properties
		if(oField.comptype=="button")
		{
			oComp.attribute.text = oField.label;
		}
		//If the Component Type is Checkbox, add label text to the text properties
		else if(oField.comptype=="checkbox")
		{
			oComp.attribute.text = oField.label;
		}
		//If the Component Type is Checkbox, add label text to the text properties
		else if(oField.comptype=="static")
		{
			oComp.attribute.text = oField.label;
		}else
		{
			//In order to process the Bind, add Id, Field Id to BindItems Array
			this.arrBindItems[this.arrBindItems.length] = {"compid" : sCompId, "fieldid" : sFieldId};
		}

		oModel[oModel.length-1].Components.push(oComp);
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Parameter    :
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function()
{

    var oInitValue = [];

    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Parameter    :
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function()
{
	//Initialize Object
    var oObjects = [];

    var oViewDataset = this.lfn_GetDataset("viewdataset", this.oFieldArray, 1);

    //Object Information Setting
    oObjects.push(oViewDataset);

    //Return Object Information
    return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetBind
 * Parameter    :
 * Return       : bind contents (JSON format)
 * Description  : Function to generate <Bind> source
 *---------------------------------------------------------------------------------------------*/
fn_GetBind = function()
{
	var oBind = this.lfn_GetBindItem("viewdataset", this.arrBindItems);

    return oBind;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Parameter    :
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function()
{
    var oScript = {};

    /*
    oScript =
    {
        "tag": "Script",
        "attribute": { "type" : "xscript5.1" },
        "value": "this.fn_Alert = function(){this.alert('MESSAGE')};"
    }
    */

    return oScript;
};]]></Script>
</ViewTemplateInfo>
