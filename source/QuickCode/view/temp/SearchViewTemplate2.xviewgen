<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="SearchViewTemplate" viewtype="Asset" description=""/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/*============================================================================================*											
o File Name   : SearchViewTemplate.xviewgen											
o Developer   : Kim Dae Won											
o Create Date : 2021.04.29											
o Description : Search View Template											
o Version     : 1.0.0.0											
*============================================================================================*/											
											
//////////////////////////////Constant Setting  START ////////////////////////////////////////////////////											

//Field Default Width									
var COMP_WIDTH    		  = "100px";							
									
//Field Default Height									
var COMP_HEIGHT   		  = "30px";							
									
//Label Default Width									
var LABEL_WIDTH    		  = 100;							

//Label Default Height									
var LABEL_HEIGHT    	  = 30;		
											
//Lookup Button Default Width											
var SEARCH_BUTTON_WIDTH   = 110;											
											
//Lookup Button Default Height											
var SEARCH_BUTTON_HEIGHT  = 40;											
											
//Lookup Button Padding											
var SEARCH_BUTTON_PADDING_LEFT     = 5;											
var SEARCH_BUTTON_PADDING_TOP      = 5;											
var SEARCH_BUTTON_PADDING_RIGHT    = 5;											
var SEARCH_BUTTON_PADDING_BOTTOM   = 5;											
											
//Lookup Button Default Text											
var SEARCH_BUTTON_TEXT    = "Search";											
											
//Lookup Button Default Form											
var SEARCH_BUTTON_TYPE    = "bottom";											
											
//Component Default Type											
var COMP_TYPE     		  = "edit";									

//Label Padding									
var LABEL_PADDING	     = "5 0 0 5";

//Component Padding									
var COMP_PADDING	     = "5 0 0 5";
											
//Component Default CSS Class											
var COMP_CSSCLASS		  = "";									
											
//Label Default CSS Class											
var LABEL_CSSCLASS		  = "sta_label";									
											
//Lookup Button Css Class											
var SEARCH_BUTTON_CSSCLASS = "btn_search";											
											
//Background Static Css Class											
var SEARCH_BG_CSSCLASS = "sta_searchbox";											

//컴포넌트 사용여부
var USE_COMP 			  = "true";
//////////////////////////////Constant Setting  END ////////////////////////////////////////////////////											
											
//Model Information											
var oFieldArray;											

//Use Model Information
var oUseFieldArray;

//View Component Information											
var oContents;											
											
//Option Setting Information											
var oGenerationAttr;											
											
//Component ID List											
var arrCompIds = [];											
											
//Component + Bind Field List											
var arrBindItems = [];											
											
/*============================================================================================*											
* Parameter Structure Example											
											
1. 'fieldarray' structure example											
{											
    "modelinfo":											
    {											
        "serviceid":"model_sample",                                // model service id											
        "serviceurl":"http://127.0.0.1:8983/app/addSearchApi.do?"  // model service url											
    },											
    "fieldcount" : "2",                                            // number of fields in model											
    "fields" :											
    [											
        {                                                          // About the first field											
            "id": "company",											
            "label": "Company Name",											
            "fieldtype": "SelectOne",											
            "datatype": "STRING",											
            "datasize": "80",											
            "editable": "true",											
            "uselabel": "true"											
        },											
        {                                                          // About the second field											
            "id": "department",											
            "label": "Department Name",											
            "fieldtype": "SelectOne",											
            "datatype": "STRING",											
            "datasize": "80",											
            "editable": "true",											
            "uselabel": "true"											
        } 											
    ]											
}											
											
2. 'generationattr' structure example											
{                                                                  // user-entered attributes for 'view' generation											
  "attributes": {											
    "use_triggerbutton": "true"											
    "triggerbuttontext": "Search"											
  }											
}											
											
3. 'contents' structure example											
// --- design source of xfdl --- //											
//   <View id="View00" viewtype="FreeForm" taborder="2" ... >											
//     <Layouts>											
//       <Layout>											
//         <Static id="Static00" text="Company Name" left="0" .../>											
//         <Combo id="Combo00" left="85" top="0" .../>											
//         <Button id="btn_Trigger" left="617" top="5" .../>											
//         ...											
//       </Layout>											
//     </Layouts>											
//     <InitValue>											
//       <Combo id="Combo00" enable="true"/>											
//     </InitValue>											
//     <Objects>											
//       <Dataset id="Viewdataset">      											
//         <ColumnInfo>      											
//           <Column id="company" type="BLOB" size="80"/>      											
//           <Column id="department" type="BLOB" size="80"/>      											
//         </ColumnInfo>      											
//         <Rows>      											
//           <Row/>      											
//         </Rows>      											
//       </Dataset>      											
//     </Objects>  											
//     <Bind>											
//       <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>											
//     </Bind>											
//     <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>											
//   </View>											
    											
// --- design source converted to json format --- //											
{											
    "View": {                                                     // <View id="View00" viewtype="FreeForm" taborder="2" ... />											
        "tag": "View",											
        "referenceinfo": {											
            "realwidth": "500",                                   // Real width of view component											
            "realheight": "250"                                   // Real height of view component											
        },											
        "attribute": {											
            "id": "View00",                                       // 'ID' of view component											
            "viewtype": "FreeForm",                               // 'viewtype' property value of view component											
            "taborder": "2",                                      // 'taborder' property value of view component											
            "text": "search view",                                // 'text' property value of view component											
            "left": "0",                                          // 'left' property value of view component											
            "top": "0",                                           // 'top' property value of view component											
            "width": "100%",                                      // 'width' property value of view component											
            "height": "50%"                                       // 'height' property value of view component											
        },											
        "Model": [                                                // Information of components generated by each model field information.											
            {                                                     // "fieldid" : "value" => The component generated by the field of Model											
                "fieldid": "company",                             // "fieldid" : ""      => The component generated without the field of Model											
                "Components": [                                   // The component information generated by the 'company' field.											
                    {                                             //   <Static id="Static00" text="Company Name" left="0" .../>											
                        "tag": "Static",											
                        "attribute": {											
                            "id": "Static00",											
                            "text": "Company Name",											
                            "left": "0",											
                            "top": "0",											
                            "width": "80",											
                            "height": "20",											
                        }											
                    },											
                    {                                             //   <Combo id="Combo00" left="85" top="0" .../>											
                        "tag": "Combo",											
                        "attribute": {											
                            "id": "Combo00",											
                            "left": "85",											
                            "top": "0",											
                            "width": "100",											
                            "height": "24",											
                        }											
                    }											
                ]											
            },											
            {   // with field											
                "fieldid": "department",                          // "fieldid" : "value" => The component generated by the field of Model											
                "Components": [											
                ...											
                ]											
            },											
            {											
                "fieldid": "",                                    // "fieldid" : ""      => The component generated without the field of Model											
                "Components": [											
                    {                                             //   <Button id="btn_Trigger" left="617" top="5" .../>											
                        "tag": "Button",											
                        "attribute": {											
                          "id": "btn_Trigger",											
                          "left": "617",											
                          "top": "5",											
                          "width": "70",											
                          "height": "50",											
                          "text": "Search"											
                        }											
                    }											
                ]											
            }											
        ],											
        "InitValue": [											
          {                                                       //   <InitValue>											
            "tag": "InitValue",                                   //     <Combo id="Combo00" enable="true"/>											
            "InitValue": [                                        //   </InitValue>											
              {											
                "tag": "Combo",											
                "attribute": {											
                  "id": "Combo00",											
                  "enable": "true"											
                }											
              }											
            ]											
          }											
        ],											
        "Objects": [											
          {                                                       //   <Objects>											
            "tag": "Objects",                                     //     <Dataset id="Viewdataset">											
            "Objects": [                                          //       <ColumnInfo>											
              {                                                   //         <Column id="company" type="BLOB" size="80"/>											
                "tag": "Dataset",                                 //         <Column id="department" type="BLOB" size="80"/>											
                "attribute": {                                    //       </ColumnInfo>											
                  "id": "viewdataset"                             //       <Rows>											
                },                                                //         <Row/>											
                "Dataset": [                                      //       </Rows>											
                  {                                               //     </Dataset>											
                    "tag": "ColumnInfo",                          //   </Objects>											
                    "ColumnInfo": [											
                      {											
                        "tag": "Column",											
                        "attribute": {											
                          "id": "company",											
                          "type": "BLOB",											
                          "size": "80"											
                        }											
                      },											
                      {											
                        "tag": "Column",											
                        "attribute": {											
                          "id": "department",											
                          "type": "BLOB",											
                          "size": "80"											
                        }											
                      }											
                    ]											
                  },											
                  {											
                    "tag": "Rows",											
                    "Rows": [											
                      {											
                        "tag": "Row"											
                      }											
                    ]											
                  }											
                ]											
              }											
            ]											
          }											
        ],											
        "Bind": [											
        {                                                         //   <Bind>											
          "tag": "Bind",                                          //     <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>											
          "Bind": [                                               //   </Bind>											
              {											
                "tag": "BindItem",											
                "attribute": {											
                  "id": "item0",											
                  "compid": "Combo00",											
                  "propid": "value",											
                  "datasetid": "viewdataset",											
                  "columnid": "company"											
                }											
              }											
            ]											
          }											
        ],											
        "Script": {                                               // <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>											
            "tag": "Script",											
            "attribute": {											
                "type": "xscript5.1"											
            },											
            "value": "this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}"											
        }											
    }											
}											
*============================================================================================*/											
											
/*---------------------------------------------------------------------------------------------*											
 * Function    : fn_GetViewGenerationResult											
 * Parameter   : 											
 *               - fieldarray     : model field list											
 *               - contents       : old contents (include <View>)											
 *               - generationattr : attributes for view generation											
 * Return      : View contents (source + script) (JSON format)											
                 ex) {											
                        "View": {											
                            "tag": "View",											
                            "attribute": {											
                                "id": "View00",											
                                "viewtype": "FreeForm",											
                                "taborder": "2",											
                                "text": "search view",											
                                "left": "0",											
                                ...											
                            },											
                            "Model": [											
                                {   // with field											
                                    "fieldid": "department",											
                                    "Components": [											
                                    ...											
                                    ]											
                                },											
                                {   // without field											
                                    "fieldid": "",											
                                    "Components": [											
                                    ...											
                                    ]											
                                }											
                            ],											
                            "InitValue": [											
                            ],											
                            "Objects": [											
                            ],											
                            "Bind": [											
                            ],											
                            "Script": {											
                                "tag": "Script",											
                                "attribute": {											
                                },											
                                "value": ""											
                            }											
                        }											
                    }											
 * Description : Generate the view based on the model field and return the results.											
 *---------------------------------------------------------------------------------------------*											
 *                            !!! This is a required function. !!!                             *											
 *                            !!! Do not delete it. !!!                                        *											
 *---------------------------------------------------------------------------------------------*/											
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr) {											
											
    //Return Value											
    var vResult = "";											
											
    //trace(">> fieldarray : " + fieldarray);											
	//trace(">> contents : " + contents);										
    //trace(">> generationattr : " + generationattr);											
      											
    //Set Model Information as JSON Object											
    if(fieldarray)oFieldArray = JSON.parse(fieldarray);											
    											
	//Set View Component Information as JSON Object 										
    if(contents)oContents = JSON.parse(contents);											
    											
	//Set Setting Information as JSON Object										
    if(generationattr)oGenerationAttr = JSON.parse(generationattr);											
    											
	//Model Information Initialization										
	oContents.View.Model = [];										
	
	fn_MakeUseFieldArray(fieldarray);
	
	//Load Model Information Generation Function										
	fn_GetModel();										
											
	//Load InitValue Information Generation Function										
    oContents.View.InitValue = fn_GetInitValue();											
											
	//Load Object Information Generation Function										
    oContents.View.Objects = fn_GetObjects();											
											
	//Load BindInfo Information Generation Function										
    oContents.View.Bind = fn_GetBind();											
											
	//Load Script Information Generation Function										
    oContents.View.Script = fn_GetScript();											
    											
	//Convert View Component Information into String										
    vResult = JSON.stringify(oContents, null, "\t");											
    											
    //trace(">> vResult : " + vResult);											
    //Return View Component Information											
    return vResult;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetViewAttributeList											
 * Return       : View generation attribute list (JSON format)											
                  ex)   {											
                        "attributecount": "2",											
                        "attributes": [											
                           {											
                                "id": "use_triggerbutton",											
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList											
                                "defaultvalue": "true",											
                                "description": "Specifies whether trigger button is auto-created or not"											
                            },											
                            {											
                                "id": "triggerbuttontext",											
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList											
                                "defaultvalue": "Search",											
                                "description": "Enter text for trigger button"											
                            }											
                        ]											
                    }											
 * Description : Obtain a list of custom attributes required for view generation											
 *---------------------------------------------------------------------------------------------*/											
fn_GetViewAttributeList = function(){											
											
    var strJson = "";											
    var oJson = {											
                        "attributecount": "8",											
                        "attributes": [											
                            {											
                                "id": "direction",											
                                "edittype": "Enum",											
                                "defaultvalue": "horizontal",											
								"enumlist" : ["horizontal", "vertical"],			
                                "description": "Set the Field Production Direction."											
                            },											
							{				
                                "id": "halign",											
                                "edittype": "Enum",											
                                "defaultvalue": "left",											
								"enumlist" : ["left", "center", "right"],			
                                "description": "Set the Field  Horizontal Alignment."											
                            },											
							{				
                                "id": "valign",											
                                "edittype": "Enum",											
                                "defaultvalue": "top",											
								"enumlist" : ["top", "middle", "bottom"],			
                                "description": "Set the Field Vertical Alignment."											
                            },											
							{				
                                "id": "searchbuttontype",											
                                "edittype": "Enum",											
                                "defaultvalue": SEARCH_BUTTON_TYPE,											
								"enumlist" : ["none", "top", "middle", "bottom", "full"],			
                                "description": "Set the Lookup Button Form."											
                            },											
							{				
                                "id": "searchbuttontext",											
                                "edittype": "String",											
                                "defaultvalue": SEARCH_BUTTON_TEXT,											
								"description": "Search Button Text"			
                            },											
							{				
                                "id": "searchbuttoncssclass",											
                                "edittype": "String",											
                                "defaultvalue": SEARCH_BUTTON_CSSCLASS,											
								"description": "Search Button CSS Class Id"			
                            },											
							{				
                                "id": "searchbgcssclass",											
                                "edittype": "String",											
                                "defaultvalue": SEARCH_BG_CSSCLASS,											
								"description": "Search Backgroudn Static CSS Class Id"			
                            },											
							{				
                                "id": "format",											
                                "edittype": "layout",											
								"defaultvalue": "",			
								"description": "Set the View Layout"			
                                											
                            }											
                        ]											
                  };											
				  							
	strJson = JSON.stringify(oJson, null, "\t");										
    return strJson;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetFieldUserAttributeList											
 * Return       : user attribute list from model field(JSON format)											
                  ex)   {											
                        "attributecount": "2",											
                        "attributes": [											
                           {											
                                "id": "use_triggerbutton",											
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList											
                                "defaultvalue": "true",											
                                "description": "Specifies whether trigger button is auto-created or not"											
                            },											
                            {											
                                "id": "triggerbuttontext",											
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList											
                                "defaultvalue": "Search",											
                                "description": "Enter text for trigger button"											
                            }											
                        ]											
                    }											
 * Description  : Obtain a list of user attributes to register in model field											
 *---------------------------------------------------------------------------------------------*/											
fn_GetFieldUserAttributeList = function (){											
    var strJson = "";											
    											
    // TODO : Write a code that predefines the list of user attributes for adding to the model field.											
     var oJson = {									
                        "attributecount": "9",									
                        "attributes": [									
                            {									
                                "id": "comptype",									
                                "edittype": "Enum",									
								"enumlist" : ["button", "combo", "edit", "maskedit", "textarea", "static", "radio", "checkbox", "spin", "calendar", "imageviewer", "progressbar", "calFromTo"],	
                                "defaultvalue": COMP_TYPE,									
                                "description": "Types of Components to be Expressed"									
                            },									
							{		
                                "id": "compwidth",									
                                "edittype": "String",									
								"defaultvalue": COMP_WIDTH,	
                                "description": "Component Width(px or %)"									
                            },									
							{		
                                "id": "compheight",									
                                "edittype": "String",									
								"defaultvalue": COMP_HEIGHT,	
                                "description": "Component Height(px or %)"									
                            },									
							{		
                                "id": "labelwidth",									
                                "edittype": "Number",									
								"defaultvalue": LABEL_WIDTH,	
                                "description": "Label Width(px)"									
                            },									
							{		
                                "id": "labelheight",									
                                "edittype": "Number",									
								"defaultvalue": LABEL_HEIGHT,	
                                "description": "Label Height(px)"									
                            },									
							{		
                                "id": "comppadding",									
                                "edittype": "String",									
								"defaultvalue": COMP_PADDING,	
                                "description": "Label Width(px)"									
                            },									
							{		
                                "id": "labelpadding",									
                                "edittype": "String",									
								"defaultvalue": LABEL_PADDING,	
                                "description": "Label Height(px)"									
                            },									
							{		
                                "id": "cssclass",									
                                "edittype": "String",									
								"defaultvalue": COMP_CSSCLASS,	
                                "description": "Component CSS Class"									
                            },									
							{		
                                "id": "labelcssclass",									
                                "edittype": "String",									
								"defaultvalue": LABEL_CSSCLASS,	
                                "description": "Label CSS Class"									
                            },									
							{		
                                "id": "usecomp",									
                                "edittype": "Boolean",									
								"defaultvalue": USE_COMP,	
                                "description": "Use Component"									
                            }	
                        ]									
                  };										
				  							
	strJson = JSON.stringify(oJson, null, "\t");										
    return strJson;											
}											

/*---------------------------------------------------------------------------------------------*									
 * Function     : fn_MakeUseFieldArray									
 * Parameter    : 
					- fieldarray     : model field list
 * Return       : 									
 * Description  : Model Information Production Function 									
 *---------------------------------------------------------------------------------------------*/	
fn_MakeUseFieldArray = function(fieldarray)
{
	var bUseComp;
	var oModel = oContents.View.Model;
	
	if(fieldarray)oUseFieldArray = JSON.parse(fieldarray);
	
	var arrFields = oUseFieldArray.fields;
	
	for(var i=arrFields.length-1;i>=0;i--)
	{
		bUseComp = arrFields[i].usecomp;
		
		if(bUseComp=="false")
		{
			oModel[oModel.length] =										
			{										
				"fieldid" : arrFields[i].id, 
				"Components" :[]								
			};	
			arrFields.splice(i, 1);
		}
	}
	oUseFieldArray.fieldcount = arrFields.length;
}

/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetModel											
 * Parameter    : 											
 * Return       : 											
 * Description  : Model Information Production Function 										
 *---------------------------------------------------------------------------------------------*/											
fn_GetModel = function(){											
 											
	//Import View Component Width Value										
	var nViewCompWidth = oContents.View.referenceinfo.realwidth;										
											
	//Import View Component Height Value										
	var nViewCompHeight = oContents.View.referenceinfo.realheight;										
											
	//Load Lookup Area Background Static Production Function										
	fn_MakeSearchBackgroundStatic();										
											
	//When the Lookup Button Type is Not None										
	if(oGenerationAttr.attributes.searchbuttontype!="none")										
	{										
		//Load Lookup Button Production Function									
		fn_MakeSearchButton(nViewCompWidth, nViewCompHeight);									
											
		//Set area excluding lookup button area as component production area									
		nViewCompWidth = nViewCompWidth - SEARCH_BUTTON_WIDTH - SEARCH_BUTTON_PADDING_LEFT - SEARCH_BUTTON_PADDING_RIGHT;									
	}										
											
	//If the format properties are set, produce component-based on layout rules										
	if(oGenerationAttr.attributes.format)										
	{										
		//Import Layout Information									
		var oLayout = oGenerationAttr.attributes.format;									
											
		//Load Layout Calculation Function									
		fn_CalcLayout(oLayout, nViewCompWidth, nViewCompHeight);									
											
		//Load Layout-based Component Production Function									
		fn_MakeCompByLayout(oLayout);									
	}										
	//If the format properties are not set, create components based on basic rules										
	else										
	{										
		//Import Field Information									
		var arrFieldList = oUseFieldArray.fields;									
											
		//Import Component Production Direction Information									
		var sDirection = oGenerationAttr.attributes.direction;									
											
		//Import Component Horizontal Alignment Information									
		var sHAlign = oGenerationAttr.attributes.halign;									
											
		//Import Component Vertical Alignment Information									
		var sVAlign = oGenerationAttr.attributes.valign;									
											
		//Load Component Location Calculation Information									
		var arrFieldPosition = fn_CalcField(sDirection, sVAlign, sHAlign, nViewCompWidth, nViewCompHeight, false);									
		
		//Load Component Production Function									
		fn_MakeComp(0, 0, nViewCompWidth, nViewCompHeight, sDirection, arrFieldPosition);
	}										
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_MakeSearchBackgroundStatic											
 * Parameter    : 											
 * Return       : 											
 * Description  : Lookup Area Background Production Function											
 *---------------------------------------------------------------------------------------------*/											
fn_MakeSearchBackgroundStatic = function(){											
	//Import Background Static CSS Class Information										
	var sSearchBgCssClass = oGenerationAttr.attributes.searchbgcssclass;										
											
	var oModel = oContents.View.Model;										
	var oField;										
	var oComp;										
											
	var nCompTop;										
	var nCompRigth;										
	var nCompWidth;										
	var nCompHeight;										
	var nCompBottom;										
											
	//Add Background Static Component Tag 										
	oModel[oModel.length] =										
	{										
		"fieldid" : "", 
		"Components" :							
		[{
			"tag" : "Static",
			"attribute" :
			{
				"id" : "staBg", "left" : "0", "top" : "0", "right" : "0", "bottom" : "0",
				"cssclass" : sSearchBgCssClass
			}
		}]								
	};										
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_MakeSearchButton											
 * Parameter    : nViewCompWidth : View Component Width Value											
				  nViewCompHeight : View Component Height Value							
 * Return       : 											
 * Description  : Lookup Button Creation Function											
 *---------------------------------------------------------------------------------------------*/											
fn_MakeSearchButton = function(nViewCompWidth, nViewCompHeight){											
	//Import Lookup Button Form Information (none, top, middle, bottom, full)										
	var sSearchButtonType = oGenerationAttr.attributes.searchbuttontype;										
											
	//Import Lookup Button CSS Class Information										
	var sSearchButtonCssClass = oGenerationAttr.attributes.searchbuttoncssclass;										
											
	//Import Lookup Button Text Information										
	var sSearchButtonText = oGenerationAttr.attributes.searchbuttontext;										
											
	var oModel = oContents.View.Model;										
	var oField;										
	var oComp;										
											
	var nCompTop;										
	var nCompRigth;										
	var nCompWidth;										
	var nCompHeight;										
	var nCompBottom;										
											
	//Create Field Tag										
	oField = {"fieldid" : "", "Components" : []};										
											
	//If the lookup button creation location is top										
	if(sSearchButtonType=="top")										
	{										
		nCompTop = SEARCH_BUTTON_PADDING_TOP;									
		nCompRight = SEARCH_BUTTON_PADDING_RIGHT;									
		nCompWidth = SEARCH_BUTTON_WIDTH - SEARCH_BUTTON_PADDING_LEFT - SEARCH_BUTTON_PADDING_RIGHT;									
		nCompHeight = SEARCH_BUTTON_HEIGHT - SEARCH_BUTTON_PADDING_TOP - SEARCH_BUTTON_PADDING_BOTTOM;									
											
		oField.Components[0] = 									
		{									
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnSearch", "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "right" : nCompRight,
				"cssclass" : sSearchButtonCssClass,
				"text" : sSearchButtonText
			}						
		};									
	}										
	//If the lookup button creation location is middle										
	else if(sSearchButtonType=="middle")										
	{										
		nCompTop = nViewCompHeight/2 - ((SEARCH_BUTTON_HEIGHT + SEARCH_BUTTON_PADDING_TOP + SEARCH_BUTTON_PADDING_BOTTOM)/2);									
		nCompRight = SEARCH_BUTTON_PADDING_RIGHT;									
		nCompWidth = SEARCH_BUTTON_WIDTH - SEARCH_BUTTON_PADDING_LEFT - SEARCH_BUTTON_PADDING_RIGHT;									
		nCompHeight = SEARCH_BUTTON_HEIGHT - SEARCH_BUTTON_PADDING_TOP - SEARCH_BUTTON_PADDING_BOTTOM;									
											
		oField.Components[0] = 									
		{									
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnSearch", "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "right" : nCompRight,
				"cssclass" : sSearchButtonCssClass,
				"text" : sSearchButtonText
			}						
		};									
	}										
	//If the lookup button creation location is bottom										
	else if(sSearchButtonType=="bottom")										
	{										
		nCompRight = SEARCH_BUTTON_PADDING_RIGHT;									
		nCompBottom = SEARCH_BUTTON_PADDING_BOTTOM;									
		nCompWidth = SEARCH_BUTTON_WIDTH - SEARCH_BUTTON_PADDING_LEFT - SEARCH_BUTTON_PADDING_RIGHT;									
		nCompHeight = SEARCH_BUTTON_HEIGHT - SEARCH_BUTTON_PADDING_TOP - SEARCH_BUTTON_PADDING_BOTTOM;									
											
		oField.Components[0] = 									
		{									
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnSearch", "width" : nCompWidth, "height" : nCompHeight, "right" : nCompRight, "bottom" : nCompBottom,
				"cssclass" : sSearchButtonCssClass,
				"text" : sSearchButtonText
			}						
		};									
	}										
	//If the lookup button creation location is full										
	else										
	{										
		nCompTop = SEARCH_BUTTON_PADDING_TOP;									
		nCompRight = SEARCH_BUTTON_PADDING_RIGHT;									
		nCompWidth = SEARCH_BUTTON_WIDTH - SEARCH_BUTTON_PADDING_LEFT - SEARCH_BUTTON_PADDING_RIGHT;									
		nCompBottom = SEARCH_BUTTON_PADDING_BOTTOM;									
											
		oField.Components[0] = 									
		{									
			"tag" : "Button",
			"attribute" :
			{
				"id" : "btnSearch", "top" : nCompTop, "width" : nCompWidth, "right" : nCompRight, "bottom" : nCompBottom,
				"cssclass" : sSearchButtonCssClass,
				"text" : sSearchButtonText
			}							
		};									
	}										
											
	//Add Lookup Button Tag										
	oModel[oModel.length] = oField;										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_CalcLayout											
 * Parameter    : 											
				- oLayout : Layout Setting Information
				- nViewCompWidth : View Component Real Width
				- nViewCompHeight : View Component Real Height						
 * Return       : 											
 * Description  : Layout Calculation Information											
 *---------------------------------------------------------------------------------------------*/											
fn_CalcLayout = function(oLayout, nViewCompWidth, nViewCompHeight){											
	//CellList Information set on Layout										
	var arrCellList = oLayout.celllist;										
											
	//ColumnSize Information set on Layout										
	var arrColSize = oLayout.columnsize;										
											
	//RowSize Information set on Layout										
	var arrRowSize = oLayout.rowsize;										
											
	//CellList Quantity										
	var nCellCnt = arrCellList.length;										
											
	//The Sum of Column/Row Sizes that were not set at -1										
	var nAllColSize = 0;										
	var nAllRowSize = 0;										
											
	//Quantity of Column/Row Size set at -1										
	var nNoColSizeCnt = 0;										
	var nNoRowSizeCnt = 0;										
											
	//Replacement Size if Column/Row Size is -1										
	var nColSizeDef = 0;										
	var nRowSizeDef = 0 ;										
											
	var oCell;										
	var sDirection, sVAlign, sHAlign;										
	var nCol, nRow, nColSpan, nRowSpan;										
	var nColSize, nRowSize;										
											
	var nFieldWidth;										
	var nFieldWidthType;										
	var nFiledWidthMax;										
	var nFieldHeight;										
	var nFieldHeightType;										
	var nFieldHeightMax;										
											
	//Evaluate Sum of Column Sizes that are not set at -1										
	nAllColSize = arrColSize.reduce(function (pre, value){										
		if(value==-1)return pre;									
		else return pre + value;									
	});										
											
	//Evaluate Sum of Row Sizes that are not set at -1										
	nAllRowSize = arrRowSize.reduce(function (pre, value){										
		if(value==-1)return pre;									
		else return pre + value;									
	});										
											
	if(nAllColSize==-1)nAllColSize = 0;										
											
	if(nAllRowSize==-1)nAllRowSize = 0;										
											
	//Evaluate Quantity of Column/Rows set at -1										
	nNoColSizeCnt = arrColSize.filter(arrColSize=>arrColSize==-1).length;										
	nNoRowSizeCnt = arrRowSize.filter(arrRowSize=>arrRowSize==-1).length;										
											
	//If there are Column/Rows set at -1										
	//(View Component Size -(The Sum of Column/Row Sizes not set at -1))/Number of Column/Rows set at -1										
	if(nNoColSizeCnt>0)nColSizeDef = (nViewCompWidth - nAllColSize)/nNoColSizeCnt;										
	if(nNoRowSizeCnt>0)nRowSizeDef = (nViewCompHeight - nAllRowSize)/nNoRowSizeCnt;										
											
	//Save Default Column/Row Size on Layout										
	oLayout.colsizedef = nColSizeDef;										
	oLayout.rowsizedef = nRowSizeDef;										
											
	//Evaluate the Field Location Value of each Cell										
	for(var i=0;i<nCellCnt;i++)										
	{										
		//Import Information set on Cell									
		oCell = arrCellList[i];									
		sDirection = oCell.direction;									
		sVAlign = oCell.valign;									
		sHAlign = oCell.halign;									
		nCol = nexacro.toNumber(oCell.col);									
		nRow = nexacro.toNumber(oCell.row);									
		nColSpan = nexacro.toNumber(oCell.colspan);									
		nRowSpan = nexacro.toNumber(oCell.rowspan);									
											
		//Initialize to 1 if there are no Col/RowSpan Values									
		if(!nColSpan)nColSpan = 1;									
		if(!nRowSpan)nRowSpan = 1;									
											
		//Evaluate the Width/Height of that Cell									
		nColSize = fn_GetCellSize(oLayout.columnsize, nCol, nColSpan, nColSizeDef);									
		nRowSize = fn_GetCellSize(oLayout.rowsize, nRow, nRowSpan, nRowSizeDef);									
											
		//Save the Width/Height Value on that Cell									
		oCell.realcolsize = nColSize;									
		oCell.realrowsize = nRowSize;									
											
		//If there are fields connected to that Cell									
		if(oCell.fieldlist)									
		{									
			//Evaluate the Field Location Value to input on that Cell								
			oCell.fieldposition = fn_CalcField(sDirection, sVAlign, sHAlign, nColSize, nRowSize, true, oCell.fieldlist);								
		}									
	}										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_CalcField											
 * Parameter    : 											
				- sDirection : Component Production Direction
				- sVAlign : Component Vertical Alignment Method(top|middle|bottom)				
				- sHAlign : Component Horizontal Alignment Method(left|center|right)				
				- nColSize : The Width of The Cell to be Expressed
				- nRowSize : The Height of The Cell to be Expressed
				- bUseLayout : Whether Layout was used
				- arrFieldInCellList : Field List connect to the Cell							
 * Return       : arrFieldPosition : Object Array with Field Location Information											
 * Description  : Function to Evaluate the Field Location Value to be Expressed											
 *---------------------------------------------------------------------------------------------*/											
fn_CalcField = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize, bUseLayout, arrFieldInCellList){											
	var nLeft = 0;
	var nTop = 0;
	var nLabelWidth, nLabelHeight, nCompWidth, nCompHeight;
	var arrLabelPadding, arrCompPadding;
	var nLabelWidthPadding, nLabelHeightPadding, nCompWidthPadding, nCompHeightPadding
	var nColIdx = nRowIdx = 0;
	var nHeight = nWidth = 0;
	var nMaxWidth = nMaxHeight = 0;								
		
	var nStartX, nStartY;								
	var nEndX, nEndX;
	
	var nTemp, nTempLabel, nTempComp;
	
	//Import Field List Registered to the Model								
	var arrFieldList = oUseFieldArray.fields;								
									
	//Object Array to save the Field Location Information								
	var arrFieldPosition = [];								
	
	//Number of Fields connected to the Cell								
	var nFieldCnt = arrFieldList.length;
	
	
	if(bUseLayout==true)
	{
		nFieldCnt = arrFieldInCellList.length;
	}
		
	for(var i=0;i<nFieldCnt;i++)								
	{								
		if(bUseLayout==true)
		{
			sFieldId =  arrFieldInCellList[i];							
			oField = arrFieldList.filter(arrFieldList=>arrFieldList.id==sFieldId)[0];							
		}else
		{
			oField = arrFieldList[i];							
			sFieldId = oField.id;					
		}
				
		nLabelWidth = nexacro.toNumber(oField.labelwidth);							
		nLabelHeight = nexacro.toNumber(oField.labelheight);							
		
		arrLabelPadding = oField.labelpadding.split(" ");
		arrCompPadding = oField.comppadding.split(" ");
		
		nLabelWidthPadding = nexacro.toNumber(arrLabelPadding[3]) + nexacro.toNumber(arrLabelPadding[1]);
		nLabelHeightPadding = nexacro.toNumber(arrLabelPadding[0]) + nexacro.toNumber(arrLabelPadding[2]);
				
		nCompWidthPadding = nexacro.toNumber(arrCompPadding[3]) + nexacro.toNumber(arrCompPadding[1]);
		nCompHeightPadding = nexacro.toNumber(arrCompPadding[0]) + nexacro.toNumber(arrCompPadding[2]);
		
		if(nLabelWidth==0)
		{
			nCompWidth = fn_GetRealSize(oField.compwidth, 0, nColSize, COMP_WIDTH, 0, nCompWidthPadding);
		}else
		{
			nCompWidth = fn_GetRealSize(oField.compwidth, nLabelWidth, nColSize, COMP_WIDTH, nLabelWidthPadding, nCompWidthPadding);
		}
		
		nCompHeight = fn_GetRealSize(oField.compheight, 0, nRowSize, COMP_HEIGHT, 0, nCompHeightPadding);
		
		if(sDirection=="horizontal")
		{
			if(nLabelWidth==0)
			{
				nTemp = nLeft + nCompWidth + nCompWidthPadding;
			}else
			{
				nTemp = nLeft + nLabelWidth + nLabelWidthPadding + nCompWidth + nCompWidthPadding;
			}
			
					
			if(nColSize<nTemp)
			{
				nLeft = 0;
				nTop = nMaxHeight;
				nColIdx = 0;
				nRowIdx++;
			}
		}
		else
		{
			nTempLabel = nTop + nLabelHeight + nLabelHeightPadding;
			nTempComp = nTop + nCompHeight + nCompHeightPadding;
			
			if(nRowSize<nTempLabel||nRowSize<nTempComp)
			{
				nLeft = nMaxWidth;
				nTop = 0;
				nColIdx++;
				nRowIdx = 0;
			}
		}
		
		arrFieldPosition[i] = 
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"labelwidth" : nLabelWidth,
			"labelheight" : nLabelHeight,
			"labelpadding" : arrLabelPadding,
			"compwidth" : nCompWidth,
			"compheight" : nCompHeight,
			"comppadding" : arrCompPadding,
			"alignx" : 0,
			"aligny" : 0,
			"colidx" : nColIdx,
			"rowidx" : nRowIdx
		};					
									
		if(sDirection=="horizontal")
		{
			if(nLabelWidth==0)
			{
				nLeft = nLeft + nCompWidth + nCompWidthPadding;
			}else
			{
				nLeft = nLeft + nLabelWidth + nLabelWidthPadding+nCompWidth + nCompWidthPadding;
			}
			
			nColIdx++;
			
			nTempLabel = nTop + nLabelHeight + nLabelHeightPadding;
			nTempComp = nTop + nCompHeight + nCompHeightPadding;
			
			if(nTempLabel>nMaxHeight)nHeight = nTempLabel;
			else if(nTempComp>nMaxHeight)nHeight = nTempComp;
							
			if(nHeight>nMaxHeight)nMaxHeight = nHeight;
		}
		else
		{
			nTempLabel = nTop + nLabelHeight + nLabelHeightPadding;
			nTempComp =  nTop + nCompHeight + nCompHeightPadding;
			
			if(nTempLabel<nTempComp)nTop = nTempComp;
			else nTop = nTempLabel;
						
			nRowIdx++;
			
			nWidth = nLeft + nLabelWidth + nLabelWidthPadding + nCompWidth + nCompWidthPadding;
						
			if(nWidth>nMaxWidth)nMaxWidth = nWidth;
		}
	}		
	
	return arrFieldPosition;										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_MakeCompByLayout											
 * Parameter    : 											
				- oLayout : Layout Setting Information							
 * Return       : 											
 * Description  : Layout-based Component Production Function											
 *---------------------------------------------------------------------------------------------*/											
fn_MakeCompByLayout = function(oLayout){											
	//CellList Information set on Layout										
	var arrCellList = oLayout.celllist;										
											
	//ColumnSize Information set on Layout										
	var arrColSize = oLayout.columnsize;										
											
	//RowSize Information set on Layout										
	var arrRowSize = oLayout.rowsize;										
											
	//Import Column/Row Default Size										
	var nColSizeDef = oLayout.colsizedef;										
	var nRowSizeDef = oLayout.rowsizedef;										
											
	var nCol, nRow, nColSpan, nRowSpan;										
	var sDirection, sVAlign, sHAlign;										
	var nWidth;										
	var nHeight;										
											
	var oCell;										
	var oStatic;										
											
	for(var i=0;i<arrCellList.length;i++)										
	{										
		oCell = arrCellList[i];									
		sDirection = oCell.direction									
		nCol = nexacro.toNumber(oCell.col);									
		nRow = nexacro.toNumber(oCell.row);									
		nColSpan = nexacro.toNumber(oCell.colspan);									
		nRowSpan = nexacro.toNumber(oCell.rowspan);									
											
		//Initialize to 1 if there are no Col/RowSpan Values									
		if(!nColSpan)nColSpan = 1;									
		if(!nRowSpan)nRowSpan = 1;									
											
		//Continue if there are no Fields on the Cell									
		if(!oCell.fieldlist)continue;									
											
		//Import the Left/Top Location Value of the current Cell									
		nLeft = fn_GetCellSize(arrColSize, 0, nCol, nColSizeDef);					
		nTop = fn_GetCellSize(arrRowSize, 0, nRow, nColSizeDef);									
											
		fn_MakeComp(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition);
	}										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_MakeComp											
 * Parameter    : 											
				- nBaseLeft : Reference Coordinate (Left) to create Component
				- nBaseTop : Reference Coordinate (Top) to create Component
				- nBaseWidth : Reference Coordinate (Width) to create Component
				- nBaseHeight : Reference Coordinate (Height) to create Component
				- sDirection : Component Production Direction
				- arrFieldPosition: Object Array with Field Location Information
 * Return       : 											
 * Description  : Component Tag Production Function											
 *---------------------------------------------------------------------------------------------*/											
fn_MakeComp = function(nBaseLeft, nBaseTop, nBaseWidth, nBaseHeight, sDirection, arrFields){											
	var nLabelLeft, nLabelTop, nLabelWidth, nLabelHeight;								
	var nCompLeft, nCompTop, nCompWidth, nCompHeight;								
	var nLabelLeftPadding, nLabelTopPadding, nLabelRightPadding, nLabelBottomPadding;
	var nCompLeftPadding, nCompTopPadding, nCompWidthPadding, nCompHeightPadding;
	
	var sFieldId;								
	var oField;								
	var oFieldPosition;								
	var nRowIdx, nColIdx;								
	var nAlignX, nAlignY;								
									
	var oModel = oContents.View.Model;	
	var sLabelId;
	var sCompId;								
	var oCompClass;								
	var sCompCssClass;								
	var sLabelCssClass;								
	var sLabelText;
	
	for(var i=0;i<arrFields.length;i++)							
	{							
		//Import Field Object						
		oFieldPosition = arrFields[i];						
		sFieldId = oFieldPosition.fieldid;						
		oField = oUseFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];						
								
		//Import Component Naming Rules						
		oCompClass = fn_GetCompClass(oField.comptype);						
								
		//Import Component Css Class Id Value						
		sCompCssClass = oField.cssclass;						
								
		//Import Label Css Class Id Value						
		sLabelCssClass = oField.labelcssclass;						
		
		sLabelText = oField.label;
		
		//Import Row/Col Index where the Field will be located						
		nRowIdx = oFieldPosition.rowidx;						
		nColIdx = oFieldPosition.colidx;						
								
		//Import Align Location Information of the Field						
		nAlignX = oFieldPosition.alignx;						
		nAlignY = oFieldPosition.aligny;						
		
		nLabelLeftPadding = nexacro.toNumber(oFieldPosition.labelpadding[3]);
		nLabelTopPadding = nexacro.toNumber(oFieldPosition.labelpadding[0]);
		nLabelRightPadding = nexacro.toNumber(oFieldPosition.labelpadding[1]);
		nLabelBottomPadding = nexacro.toNumber(oFieldPosition.labelpadding[2]);
		
		nCompLeftPadding = nexacro.toNumber(oFieldPosition.comppadding[3]);
		nCompTopPadding = nexacro.toNumber(oFieldPosition.comppadding[0]);
		nCompRightPadding = nexacro.toNumber(oFieldPosition.comppadding[1]);
		nCompBottomPadding = nexacro.toNumber(oFieldPosition.comppadding[2]);
		
		nLabelLeft = nBaseLeft + oFieldPosition.left + 	nLabelLeftPadding;
		nLabelTop = nBaseTop + oFieldPosition.top + nLabelTopPadding;
		nLabelWidth = oFieldPosition.labelwidth;
		nLabelHeight = oFieldPosition.labelheight;
		
		nCompLeft = nLabelLeft + nLabelWidth + nLabelRightPadding + nCompLeftPadding;
		nCompTop = nBaseTop + oFieldPosition.top + nCompTopPadding;
		
		nCompWidth = oFieldPosition.compwidth;
		nCompHeight = oFieldPosition.compheight;
		
		sLabelId = fn_GetCompId("sta"+sFieldId+"_Label");						
		oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};	
		
		oComp = {					
					"tag" : "Static",
					"attribute" :
					{
						"id" : sLabelId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nLabelWidth, "height" : nLabelHeight
						, "text" : sLabelText, "cssclass" : sLabelCssClass
					}	
				};			
		oModel[oModel.length-1].Components.push(oComp);
		
		sCompId = fn_GetCompId(oCompClass.prefix+sFieldId);						
								
		oComp =	{					
					"tag" : oCompClass.classId,
					"attribute" :
					{
						"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "cssclass" : sCompCssClass
					}	
				};				
		if(oField.comptype=="button"||oField.comptype=="checkbox"||oField.comptype=="static")
		{
			oComp.attribute.text = oField.label;
		}
		
		if(oField.comptype=="radio")
		{
			oComp.attribute.direction = "vertical";
		}
		
		if(oField.comptype=="calFromTo")
		{
			oComp.attribute.url = oCompClass.formurl;
		}
		
		if(oField.comptype!="button"&&oField.comptype!="calFromTo")						
		{	
			arrBindItems[arrBindItems.length] = {"compid" : sCompId, "fieldid" : sFieldId, "comptype" : oField.comptype};					
		}						

		oModel[oModel.length-1].Components.push(oComp);										
	}										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetCompId											
 * Parameter    : 											
				- sCompId : Component ID to be created						
 * Return       : sRtnCompId : Component ID											
 * Description  : Component ID Production Function											
 *---------------------------------------------------------------------------------------------*/											
fn_GetCompId = function(sCompId){											
	//Check if there is a Component produced in the same Field										
	var arrTemp = arrCompIds.filter(arrCompIds=>arrCompIds.indexOf(sCompId)==0);										
	var sRtnCompId;										
											
	//If there is a Component produced in the same Field										
	if(arrTemp.length>0)sRtnCompId = sCompId+"_"+arrTemp.length;										
											
	//If there isn't a Component produced in the same Field										
	else sRtnCompId = sCompId;										
											
	//Add Component ID Management to Array										
	arrCompIds[arrCompIds.length] = sRtnCompId;										
											
	//Return Component ID										
	return sRtnCompId;										
}											
											
/*---------------------------------------------------------------------------------------------*									
 * Function     : fn_GetRealSize									
 * Parameter    : 									
				- sSize : Size Information(% or px)				
				- nLabelSize  : Size Information of Label Area
				- nParentSize : Size Information of Parent Area
				- sDefSize : Default Size Information
				- nLabelPadding : Size Information of Label Padding Area
				- nCompPadding : Size Information of Component Padding Area
 * Return       : nRealSize : px standard Size									
 * Description  : Function to Evaluate actual usage size based on the registered size									
 *---------------------------------------------------------------------------------------------*/	
fn_GetRealSize = function(sSize, nLabelSize, nParentSize, sDefSize, nLabelPadding, nCompPadding)									
{									
	var nRealSize;								
	var nSizeType;								
									
	if(!sSize)sSize = sDefSize;								
									
	nSizeType = sSize.replace(/[0-9]/g, "");								
									
	if(nSizeType=="%")								
	{								
		nRealSize = nexacro.toNumber(sSize.replace(/[^0-9]/g, ""));							
		nRealSize = (nRealSize/100) * nParentSize;
		
		nRealSize = nRealSize - nLabelSize - nLabelPadding - nCompPadding;
	}else								
	{								
		nRealSize = nexacro.toNumber(sSize.replace(/[^0-9]/g, ""));
	}								
									
	return nRealSize;								
}												
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetCellSize											
 * Parameter    : 											
				- arrList : columnsize or rowsize Size Information(% or px)
				- nIdx : Starting Column/Row Index Information
				- nSpan : Column/Row Span Information	
				- nDefSize : Default Size Information to use if -1							
											
 * Return       : nSize : px standard Size											
 * Description  : Cell Width/Height Evaluation Function											
 *---------------------------------------------------------------------------------------------*/											
fn_GetCellSize = function(arrList, nIdx, nSpan, nDefSize){											
	var nSize = 0;										
											
	for(var i=nIdx; i<nIdx+nSpan; i++)										
	{										
		if(nexacro.toNumber(arrList[i])==-1)									
		{									
			nSize += nexacro.toNumber(nDefSize);								
		}else									
		{									
			nSize += nexacro.toNumber(arrList[i]);								
		}									
	}										
											
	return nSize;										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_CalcAlignPos											
 * Parameter    : 											
				- sAlign : Component Alignment Method
				- nParentSize : Size of Parent Area
				- nSize : Size of Component Area							
 * Return       : nRtnValue : px value of Starting Location											
 * Description  : Evaluate the Align Starting Location Value of the Row/Col											
 *---------------------------------------------------------------------------------------------*/											
fn_CalcAlignPos = function(sAlign, nParentSize, nSize){											
	var nRtnValue;										
											
	if(sAlign=="center"||sAlign=="middle")nRtnValue = (nParentSize - nSize)/2;										
	else if(sAlign=="right"||sAlign=="bottom")nRtnValue = nParentSize - nSize;										
	else nRtnValue = 0;										
											
	if(nRtnValue<0)nRtnValue = 0;										
											
	return nRtnValue;										
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetInitValue											
 * Parameter    : 											
 * Return       : initvalue contents (JSON format)											
 * Description  : Function to generate <InitValue> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetInitValue = function(){											
    											
    var oInitValue = [];											
    											
    return oInitValue;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetObjects											
 * Parameter    : 											
 * Return       : objects contents (JSON format)											
 * Description  : Function to generate <Objects> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetObjects = function(){											
    											
    //Initialize Object											
    var oObjects = [];											
    											
    //Object Information Setting											
    oObjects =     											
    [											
        {											
            "tag": "Dataset",											
            "attribute": { "id": "viewdataset" },											
            "Dataset": [											
            {											
                "tag": "ColumnInfo",											
                "attribute": {},											
                //Load Column Information Setting Function											
                "ColumnInfo": fn_GetDsColumns()											
            },											
            {											
                "tag": "Rows",											
                "attribute": {},											
                //Load Row Information Setting Function											
                "Rows": fn_GetDsRows()											
            }]											
        }											
    ];											
    											
    //Return Object Information											
    return oObjects;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetBind											
 * Parameter    : 											
 * Return       : bind contents (JSON format)											
 * Description  : Function to generate <Bind> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetBind = function(){											
    											
    var oBind = [];											
    var oBindItems = [];											
    											
    var sCompId											
    var sFieldId;											
	var sBindDataset = "viewdataset";										
	var nBindItemCount = arrBindItems.length;										
        											
    for(var i=0;i<nBindItemCount;i++)											
    {    											
        sCompId = arrBindItems[i].compid;											
		sFieldId = arrBindItems[i].fieldid;									
        											
        oBindItems[i] = 											
        {											
            "tag" : "BindItem",											
            "attribute" : 											
            {											
                "id" : "bind_"+sCompId, "compid" : sCompId, "propid" : "value", "datasetid" : sBindDataset, "columnid" : sFieldId											
            }											
        }											
    }											
    											
    oBind[oBind.length] = {"tag" : "Bind", "Bind" : oBindItems};											
    											
    return oBind;											
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetScript											
 * Parameter    : 											
 * Return       : script contents (JSON format)											
 * Description  : Function to generate <Script> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetScript = function(){											
    var oScript = {};											
    											
    /*											
    oScript = 											
    {											
        "tag": "Script",											
        "attribute": { "type" : "xscript5.1" },											
        "value": "this.fn_Alert = function(){this.alert('MESSAGE')};"											
    }											
    */											
    											
    return oScript;																		
};											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetCompClass											
 * Parameter    : 											
 *                - sCompType : CompType of field											
 * Return       : component class data											
 * Description  : Returns class information of the component based on Field data											
 *---------------------------------------------------------------------------------------------*/											
fn_GetCompClass = function(sCompType){											
	var oCompClass = { "classId" : null, "prefix" : null };										
											
	switch(sCompType)										
	{										
		case "button" : oCompClass.classId = "Button";									
						oCompClass.prefix = "btn";					
						break;					
		case "combo" : oCompClass.classId = "Combo";									
						oCompClass.prefix = "cmb";					
						break;					
		case "edit" : oCompClass.classId = "Edit";									
						oCompClass.prefix = "edt";					
						break;					
		case "maskedit" : oCompClass.classId = "MaskEdit";									
						oCompClass.prefix = "msk";					
						break;					
		case "textarea" : oCompClass.classId = "TextArea";									
						oCompClass.prefix = "txt";					
						break;					
		case "static" : oCompClass.classId = "Static";									
						oCompClass.prefix = "sta";					
						break;					
		case "radio" : oCompClass.classId = "Radio";									
						oCompClass.prefix = "rdo";					
						break;					
		case "checkbox" : oCompClass.classId = "CheckBox";									
						oCompClass.prefix = "chk";					
						break;					
		case "spin" : oCompClass.classId = "Spin";									
						oCompClass.prefix = "spn";					
						break;					
		case "calendar" : oCompClass.classId = "Calendar";									
						oCompClass.prefix = "cal";					
						break;					
		case "imageviewer" : oCompClass.classId = "ImageViewer";									
						oCompClass.prefix = "img";					
						break;					
		case "progressbar" : oCompClass.classId = "ProgressBar";									
						oCompClass.prefix = "prg";					
						break;					
		default : oCompClass.classId = "Static";									
				  oCompClass.prefix = "sta";							
	}										
											
    //Return Component Information											
    return oCompClass;											
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetDsColumns											
 * Parameter    : 											
 * Return       : dataset column(s) data											
 * Description  : Function to generate <Column> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetDsColumns = function(){											
    var i;											
    var oColumns = [];											
    											
    var oField;											
    var sFieldId;											
    var sDataType;											
    var sDataSize;											
    											
    //Import Model Field Quantity											
    var nCount = oFieldArray.fieldcount;											
    											
    //Create Column Information based on model field number											
    for(i=0;i<nCount;i++)											
    {											
        oField = oFieldArray.fields[i];											
        											
        sFieldId = oField.id;											
        sDataType = oField.datatype;											
        sDataSize = oField.datasize;											
        											
		if(oField.comptype!="button")									
		{									
			oColumns[i] = 								
			{								
				"tag": "Column",
				"attribute": 
				{
					"id": sFieldId, "type": sDataType, "size": sDataSize
				}				
			};								
		}									
    }											
    											
    //Return Column Information											
    return oColumns;											
}											
											
/*---------------------------------------------------------------------------------------------*											
 * Function     : fn_GetDsRows											
 * Parameter    : 											
 * Return       : dataset row(s) data											
 * Description  : Function to generate <Row> source											
 *---------------------------------------------------------------------------------------------*/											
fn_GetDsRows = function(){											
    var i;											
    var oRows = [];											
    var oRow = [];											
    											
    var oField;											
    var sFieldId;											
    											
    //Number of Rows											
    var nRowCnt = 1;											
											
    //Number of Columns											
    var nColCnt = oFieldArray.fieldcount;											
    											
    for(i=0;i<nRowCnt;i++)											
    {											
        oRow = [];											
        											
        //Add Row Information to Rows											
        oRows[i] = {"tag": "Row",    "attribute": {},"Row": oRow};											
    }											
    											
    //Return Rows Information											
    return oRows;											
}]]></Script>
</ViewTemplateInfo>
