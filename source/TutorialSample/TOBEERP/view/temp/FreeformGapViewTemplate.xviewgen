<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="dataViewTemplate" viewtype="Asset" description=""/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/**
*  Freeform View Template
*  @FileName 	FreeformGapViewTemplate.xviewgen
*  @Creator 	Kim Dae Won
*  @CreateDate 	2021.04.29
*  @Desction    상세화면(여백기능 추가) 생성 템플릿
*  @version		1.0.0.0
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2021.04.29     		Kim Dae Won       	    최초 생성
*******************************************************************************
*/
/************************************************************************************************
 * include 선언부
 ************************************************************************************************/
include "view_lib::util.xjs";
include "view_lib::common.xjs";
/************************************************************************************************
 * 변수 선언 영역
 ************************************************************************************************/
//--------------------------------------------------------------------------------------------------------
// View 관련 상수
//--------------------------------------------------------------------------------------------------------
// View 여백
this.VIEW_PADDING			= "";
// 컴포넌트 생성 방향
this.DIRECTION				= "horizontal";
// 컴포넌트 생성 수평 정렬방식
this.HALIGN					= "left";
// 컴포넌트 생성 수직 정렬방식
this.VALIGN					= "top";
//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------
// 타이틀 객체 관련 상수
//--------------------------------------------------------------------------------------------------------
//타이틀 영역 전체건수 표시여부(Freeform에서는 사용안함)
this.USE_TOT_COUNT			= "false";
//타이틀 영역 접기/펼치기 버튼 표시여부("none", "open","close")
this.USE_EXPAND_BUTTON		= "none";
//--------------------------------------------------------------------------------------------------------

//////////////////////////////상수 설정부 START ////////////////////////////////////////////////////

//Field Default Width
this.COMP_WIDTH			= "100%";

//Field Default Height
this.COMP_HEIGHT		= "30px";

//Label Default Width
this.LABEL_WIDTH		= 100;

//Label Default Height
this.LABEL_HEIGHT		= 40;

//컴포넌트 디폴트 Type
this.COMP_TYPE			= "auto";

//Label Default Type
this.LABEL_TYPE			= "static";

//Background Default Type
this.COMP_BG_TYPE		= "static";

//Label Padding
this.LABEL_PADDING		= "0 0 0 0";

//Component Padding
this.COMP_PADDING		= "5 5 5 5";

//컴포넌트 디폴트 CSS Class
this.COMP_CSSCLASS		= "";

//컴포넌트 배경 디폴트 CSS Class
this.COMP_BG_CSSCLASS	= "sta_WF_fieldbox";

//레이블 디폴트 CSS Class
this.LABEL_CSSCLASS		= "sta_WF_labelbox";

//Required Label Default CSS Class
this.LABEL_REQUIRED_CSSCLASS	= "sta_labelbox_essential";

//Background Component Use Type
this.USE_COMP_BG		= "true";

//컴포넌트 사용여부
this.USE_COMP			= "true";

//////////////////////////////상수 설정부 END ////////////////////////////////////////////////////
/*============================================================================================*
* Parameter Structure Example

1. 'fieldarray' structure example
{
    "modelinfo":
    {
        "serviceid":"model_sample",                                // model service id
        "serviceurl":"http://127.0.0.1:8983/app/addSearchApi.do?"  // model service url
    },
    "fieldcount" : "2",                                            // number of fields in model
    "fields" :
    [
        {                                                          // About the first field
            "id": "company",
            "label": "Company Name",
            "fieldtype": "SelectOne",
            "datatype": "STRING",
            "datasize": "80",
            "editable": "true",
            "uselabel": "true"
        },
        {                                                          // About the second field
            "id": "department",
            "label": "Department Name",
            "fieldtype": "SelectOne",
            "datatype": "STRING",
            "datasize": "80",
            "editable": "true",
            "uselabel": "true"
        }
    ]
}

2. 'generationattr' structure example
{                                                                  // user-entered attributes for 'view' generation
  "attributes": {
    "use_triggerbutton": "true"
    "triggerbuttontext": "Search"
  }
}

3. 'contents' structure example
// --- design source of xfdl --- //
//   <View id="View00" viewtype="FreeForm" taborder="2" ... >
//     <Layouts>
//       <Layout>
//         <Static id="Static00" text="Company Name" left="0" .../>
//         <Combo id="Combo00" left="85" top="0" .../>
//         <Button id="btn_Trigger" left="617" top="5" .../>
//         ...
//       </Layout>
//     </Layouts>
//     <InitValue>
//       <Combo id="Combo00" enable="true"/>
//     </InitValue>
//     <Objects>
//       <Dataset id="Viewdataset">
//         <ColumnInfo>
//           <Column id="company" type="BLOB" size="80"/>
//           <Column id="department" type="BLOB" size="80"/>
//         </ColumnInfo>
//         <Rows>
//           <Row/>
//         </Rows>
//       </Dataset>
//     </Objects>
//     <Bind>
//       <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>
//     </Bind>
//     <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>
//   </View>

// --- design source converted to json format --- //
{
    "View": {                                                     // <View id="View00" viewtype="FreeForm" taborder="2" ... />
        "tag": "View",
        "referenceinfo": {
            "realwidth": "500",                                   // Real width of view component
            "realheight": "250"                                   // Real height of view component
        },
        "attribute": {
            "id": "View00",                                       // 'ID' of view component
            "viewtype": "FreeForm",                               // 'viewtype' property value of view component
            "taborder": "2",                                      // 'taborder' property value of view component
            "text": "search view",                                // 'text' property value of view component
            "left": "0",                                          // 'left' property value of view component
            "top": "0",                                           // 'top' property value of view component
            "width": "100%",                                      // 'width' property value of view component
            "height": "50%"                                       // 'height' property value of view component
        },
        "Model": [                                                // Information of components generated by each model field information.
            {                                                     // "fieldid" : "value" => The component generated by the field of Model
                "fieldid": "company",                             // "fieldid" : ""      => The component generated without the field of Model
                "Components": [                                   // The component information generated by the 'company' field.
                    {                                             //   <Static id="Static00" text="Company Name" left="0" .../>
                        "tag": "Static",
                        "attribute": {
                            "id": "Static00",
                            "text": "Company Name",
                            "left": "0",
                            "top": "0",
                            "width": "80",
                            "height": "20",
                        }
                    },
                    {                                             //   <Combo id="Combo00" left="85" top="0" .../>
                        "tag": "Combo",
                        "attribute": {
                            "id": "Combo00",
                            "left": "85",
                            "top": "0",
                            "width": "100",
                            "height": "24",
                        }
                    }
                ]
            },
            {   // with field
                "fieldid": "department",                          // "fieldid" : "value" => The component generated by the field of Model
                "Components": [
                ...
                ]
            },
            {
                "fieldid": "",                                    // "fieldid" : ""      => The component generated without the field of Model
                "Components": [
                    {                                             //   <Button id="btn_Trigger" left="617" top="5" .../>
                        "tag": "Button",
                        "attribute": {
                          "id": "btn_Trigger",
                          "left": "617",
                          "top": "5",
                          "width": "70",
                          "height": "50",
                          "text": "Search"
                        }
                    }
                ]
            }
        ],
        "InitValue": [
          {                                                       //   <InitValue>
            "tag": "InitValue",                                   //     <Combo id="Combo00" enable="true"/>
            "InitValue": [                                        //   </InitValue>
              {
                "tag": "Combo",
                "attribute": {
                  "id": "Combo00",
                  "enable": "true"
                }
              }
            ]
          }
        ],
        "Objects": [
          {                                                       //   <Objects>
            "tag": "Objects",                                     //     <Dataset id="Viewdataset">
            "Objects": [                                          //       <ColumnInfo>
              {                                                   //         <Column id="company" type="BLOB" size="80"/>
                "tag": "Dataset",                                 //         <Column id="department" type="BLOB" size="80"/>
                "attribute": {                                    //       </ColumnInfo>
                  "id": "viewdataset"                             //       <Rows>
                },                                                //         <Row/>
                "Dataset": [                                      //       </Rows>
                  {                                               //     </Dataset>
                    "tag": "ColumnInfo",                          //   </Objects>
                    "ColumnInfo": [
                      {
                        "tag": "Column",
                        "attribute": {
                          "id": "company",
                          "type": "BLOB",
                          "size": "80"
                        }
                      },
                      {
                        "tag": "Column",
                        "attribute": {
                          "id": "department",
                          "type": "BLOB",
                          "size": "80"
                        }
                      }
                    ]
                  },
                  {
                    "tag": "Rows",
                    "Rows": [
                      {
                        "tag": "Row"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Bind": [
        {                                                         //   <Bind>
          "tag": "Bind",                                          //     <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>
          "Bind": [                                               //   </Bind>
              {
                "tag": "BindItem",
                "attribute": {
                  "id": "item0",
                  "compid": "Combo00",
                  "propid": "value",
                  "datasetid": "viewdataset",
                  "columnid": "company"
                }
              }
            ]
          }
        ],
        "Script": {                                               // <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>
            "tag": "Script",
            "attribute": {
                "type": "xscript5.1"
            },
            "value": "this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}"
        }
    }
}
*============================================================================================*/
/************************************************************************************************
 * Nexacro Studio 호출 필수 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   :
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr)
{
	//리턴 값
    var vResult = "";

    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);

    //Make Generation Info
	//this.oFieldArray : Model Information as JSON Object
	//this.oContents : View Component Information as JSON Object
	//this.oContents.View.Model : Model Information Initialization
	//this.oGenerationAttr : Setting Information as JSON Object
	//this.oUseFieldArray : Use Model Information as JSON Object
	this.lfn_MakeGenerationInfo(fieldarray, contents, generationattr, true);
	
	// View Padding 설정
	this.lfn_SetViewPadding();

	//모델정보 생성 함수 호출
	fn_GetModel();

	//InitValue 정보 생성 함수 호출
    this.oContents.View.InitValue = fn_GetInitValue();

	//Object 정보 생성 함수 호출
    this.oContents.View.Objects = fn_GetObjects();

	//BindInfo 정보 생성 함수 호출
    this.oContents.View.Bind = fn_GetBind();

	//Script 정보 생성 함수 호출
    this.oContents.View.Script = fn_GetScript();

	//뷰 컴포넌트 정보를 String으로 변환
    vResult = JSON.stringify(this.oContents, null, "\t");

    //trace(">> vResult : " + vResult);
    //뷰 컴포넌트 정보 리턴
    return vResult;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function()
{
    var sViewAttr = "";
    var oViewAttr = {
                        "attributes": [
                            {
                                "id": "direction",
                                "edittype": "Enum",
                                "defaultvalue": this.DIRECTION,
								"enumlist" : ["horizontal", "vertical"],
                                "description": "필드의 생성 방향을 설정합니다."
                            },
							{
                                "id": "halign",
                                "edittype": "Enum",
                                "defaultvalue": this.HALIGN,
								"enumlist" : ["left", "center", "right"],
                                "description": "필드의 수평 정렬방식을 설정합니다."
                            },
							{
                                "id": "valign",
                                "edittype": "Enum",
                                "defaultvalue": this.VALIGN,
								"enumlist" : ["top", "middle", "bottom"],
                                "description": "필드의 수직 정렬방식을 설정합니다."
                            },
							this.oAttrTitleText,					// Title Text
							this.oAttrTitleExpandButton,			// 접기/펼치기 버튼 표시여부
							{
                                "id": "usefieldbox",
                                "edittype": "Boolean",
                                "defaultvalue": this.USE_COMP_BG,
                                "description": "Field영역에 배경 Box를 그릴지 여부"
                            },
							{
                                "id": "format",
                                "edittype": "layout",
								"defaultvalue": "",
								"description": "View Layout을 설정합니다."

                            }
							//, this.oAttrViewPadding					// View 여백(사용안하는 경우 주석)
                        ]
                  };

	oViewAttr["attributecount"] = oViewAttr["attributes"].length;

	sViewAttr = JSON.stringify(oViewAttr, null, "\t");
    return sViewAttr;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
	var sFieldAttr = "";
	var oFieldAttr = {
                        "attributecount": "9",
                        "attributes": [
                            {
                                "id": "comptype",
                                "edittype": "Enum",
								"enumlist" : ["auto", "button", "combo", "edit", "maskedit", "textarea", "static", "radio", "checkbox", "spin", "calendar", "imageviewer", "progressbar", "calFromTo"],
                                "defaultvalue": this.COMP_TYPE,
                                "description": "Types of Components to be Expressed"
                            },
							{
                                "id": "compwidth",
                                "edittype": "String",
								"defaultvalue": this.COMP_WIDTH,
                                "description": "Component Width(px or %)"
                            },
							{
                                "id": "compheight",
                                "edittype": "String",
								"defaultvalue": this.COMP_HEIGHT,
                                "description": "Component Height(px or %)"
                            },
							{
                                "id": "labelwidth",
                                "edittype": "Number",
								"defaultvalue": this.LABEL_WIDTH,
                                "description": "Label Width(px)"
                            },
							{
                                "id": "labelheight",
                                "edittype": "Number",
								"defaultvalue": this.LABEL_HEIGHT,
                                "description": "Label Height(px)"
                            },
							{
                                "id": "comppadding",
                                "edittype": "String",
								"defaultvalue": this.COMP_PADDING,
                                "description": "Label Width(px)"
                            },
							{
                                "id": "labelpadding",
                                "edittype": "String",
								"defaultvalue": this.LABEL_PADDING,
                                "description": "Label Height(px)"
                            },
							{
                                "id": "cssclass",
                                "edittype": "String",
								"defaultvalue": this.COMP_CSSCLASS,
                                "description": "Component CSS Class"
                            },
							{
                                "id": "labelcssclass",
                                "edittype": "String",
								"defaultvalue": this.LABEL_CSSCLASS,
                                "description": "Label CSS Class"
                            },
							{
                                "id": "usecomp",
                                "edittype": "Boolean",
								"defaultvalue": this.USE_COMP,
                                "description": "Use Component"
                            }
                        ]
                  };

	oFieldAttr["attributecount"] = oFieldAttr["attributes"].length;

 	sFieldAttr = JSON.stringify(oFieldAttr, null, "\t");
    return sFieldAttr;
}

/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    :
 * Return       :
 * Description  : 모델 정보 생성 함수
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function(){

	//View Component Width 값 가져오기
	var nViewCompWidth = this.oContents.View.referenceinfo.realwidth;

	//View Component Height 값 가져오기
	var nViewCompHeight = this.oContents.View.referenceinfo.realheight;
	
	// Title 영역
	var sTitleText			= this.oGenerationAttr.attributes.titletext;			// 타이틀 Text
	var sUseTotalCount		= this.USE_TOT_COUNT;									// 전체건수 Static 생성
	var sUseExpandButton	= this.oGenerationAttr.attributes.useexpandbutton;		// expand 토글버튼 생성
	
	this.VIEW_PADDING_TOP = this.lfn_MakeTitleArea(sTitleText, sUseTotalCount, sUseExpandButton);
	
	// View 사이즈에서 View 여백 설정
	nViewCompWidth = nViewCompWidth - this.VIEW_PADDING_LEFT - this.VIEW_PADDING_RIGHT;
	nViewCompHeight = nViewCompHeight - this.VIEW_PADDING_TOP - this.VIEW_PADDING_BOTTOM;

	//format 속성이 설정되어있을 경우 Layout 룰에 따라 컴포넌트 생성
	if(this.oGenerationAttr.attributes.format)
	{
		//Layout 정보 가져오기
		var oLayout = this.oGenerationAttr.attributes.format;

		//Layout 계산 함수 호출
		fn_CalcLayout(oLayout, nViewCompWidth, nViewCompHeight);

		//Layout 기반 컴포넌트 생성 함수 호출
		fn_MakeCompByLayout(oLayout);

	}
	//format 속성이 설정되어있지 않을 경우 기본룰에 따라 컴포넌트 생성
	else
	{
		//Field 정보 가져오기
		var arrFieldList = this.oUseFieldArray.fields;

		//컴포넌트 생성 방향 정보 가져오기
		var sDirection = this.oGenerationAttr.attributes.direction;

		//컴포넌트 수평 정렬방식 정보 가져오기
		var sHAlign = this.oGenerationAttr.attributes.halign;

		//컴포넌트 수직 정렬방식 정보 가져오기
		var sVAlign = this.oGenerationAttr.attributes.valign;

		//컴포넌트 위치 계산함수 호출
		var arrFieldPosition = fn_CalcField(sDirection, sVAlign, sHAlign, nViewCompWidth, nViewCompHeight);

		//컴포넌트 생성 함수 호출
		fn_MakeComp(this.VIEW_PADDING_LEFT, this.VIEW_PADDING_TOP, nViewCompWidth, nViewCompHeight, sDirection, arrFieldPosition, false);
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcLayout
 * Parameter    : obj
 * Return       :
				- oLayout : 레이아웃 설정 정보
				- nViewCompWidth : View Component Real Width
				- nViewCompHeight : View Component Real Height
 * Description  : Layout 계산 함수
 *---------------------------------------------------------------------------------------------*/
fn_CalcLayout = function(oLayout, nViewCompWidth, nViewCompHeight)
{
	//레이아웃에 설정된 CellList 정보
	var arrCellList = oLayout.celllist;

	//레이아웃에 설정된 ColumnSize 정도
	var arrColSize = oLayout.columnsize;

	//레이아웃에 설정된 RowSize 정보
	var arrRowSize = oLayout.rowsize;

	//CellList 갯수
	var nCellCnt = arrCellList.length;

	//-1로 설정되지 않은 Column/Row의 사이즈의 합
	var nAllColSize = 0;
	var nAllRowSize = 0;

	//Column/Row 사이즈가 -1로 설정된 갯수
	var nNoColSizeCnt = 0;
	var nNoRowSizeCnt = 0;

	//Column/Row 사이즈가 -1일 경우 대체할 사이즈
	var nColSizeDef = 0;
	var nRowSizeDef = 0 ;

	var oCell;
	var sDirection, sVAlign, sHAlign;
	var nCol, nRow, nColSpan, nRowSpan;
	var nColSize, nRowSize;

	var nFieldWidth;
	var nFieldWidthType;
	var nFiledWidthMax;
	var nFieldHeight;
	var nFieldHeightType;
	var nFieldHeightMax;

	//-1로 설정되지 않은 Column의 사이즈의 합 구하기
	nAllColSize = arrColSize.reduce(function (pre, value){
		if(value==-1)return pre;
		else return pre + value;
	});

	//-1로 설정되지 않은 Row의 사이즈의 합 구하기
	nAllRowSize = arrRowSize.reduce(function (pre, value){
		if(value==-1)return pre;
		else return pre + value;
	});

	if(nAllColSize==-1)nAllColSize = 0;

	if(nAllRowSize==-1)nAllRowSize = 0;

	//-1로 설정된 Column/Row의 갯수 구하기
	nNoColSizeCnt = arrColSize.filter(arrColSize=>arrColSize==-1).length;
	nNoRowSizeCnt = arrRowSize.filter(arrRowSize=>arrRowSize==-1).length;

	//-1로 설정된 Column/Row이 존재할 경우
	//(View Component 사이즈 - (-1로 설정되지 않은 Column/Row 사이즈 합)) / -1로 설정된 Column/Row의 갯수
	if(nNoColSizeCnt>0)nColSizeDef = (nViewCompWidth - nAllColSize)/nNoColSizeCnt;
	if(nNoRowSizeCnt>0)nRowSizeDef = (nViewCompHeight - nAllRowSize)/nNoRowSizeCnt;

	//레이아웃에 Column/Row 디폴트 사이즈 저장
	oLayout.colsizedef = nColSizeDef;
	oLayout.rowsizedef = nRowSizeDef;

	//각 Cell별 필드의 위치값 구하기
	for(var i=0;i<nCellCnt;i++)
	{
		//Cell에 설정된 정보 가져오기
		oCell = arrCellList[i];
		sDirection = oCell.direction;
		sVAlign = oCell.valign;
		sHAlign = oCell.halign;
		nCol = nexacro.toNumber(oCell.col);
		nRow = nexacro.toNumber(oCell.row);
		nColSpan = nexacro.toNumber(oCell.colspan);
		nRowSpan = nexacro.toNumber(oCell.rowspan);

		//Col/RowSpan 값이 없을 경우 1로 초기화
		if(!nColSpan)nColSpan = 1;
		if(!nRowSpan)nRowSpan = 1;

		//해당 Cell의 Width/Height 구하기
		nColSize = this.lfn_GetCellSize(oLayout.columnsize, nCol, nColSpan, nColSizeDef);
		nRowSize = this.lfn_GetCellSize(oLayout.rowsize, nRow, nRowSpan, nRowSizeDef);

		//해당 Cell에 Width/Height 값 저장
		oCell.realcolsize = nColSize;
		oCell.realrowsize = nRowSize;

		//해당 Cell에 연결된 필드가 존재할 경우
		if(oCell.fieldlist)
		{
			//해당 Cell에 표현할 Field의 위치값 구하기
			oCell.fieldposition = fn_CalcFieldByLayout(sDirection, sVAlign, sHAlign, nColSize, nRowSize, oCell.fieldlist);
		}
	}
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcFieldByLayout
 * Parameter    :
				- sDirection : 컴포넌트 생성 방향
				- sVAlign : 컴포넌트 수직 정렬 방식(top|middle|bottom)
				- sHAlign : 컴포넌트 수평 정렬 방식(left|center|right)
				- nColSize : 표현할 Cell의 Width
				- nRowSize : 표현할 Cell의 Height
				- arrFieldInCellList : Cell에 추가된 Field List
 * Return       : arrFieldPosition : Field의 위치정보가 담긴 Object Array
 * Description  : 표현될 Field의 위치값을 구하는 함수
 *---------------------------------------------------------------------------------------------*/
fn_CalcFieldByLayout = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize, arrFieldInCellList)
{
	var nLeft = 0;
	var nTop = 0;
	var nRowIdx = 0;
	var nColIdx = 0;
	var nMaxWidth = nMaxHeight = 0;

	var nStartX, nStartY;
	var nEndX, nEndX;
	var nTemp;

	var oField;

	//Import Field List Registered to the Model
	var arrFieldList = this.oUseFieldArray.fields;

	//Number of Fields connected to the Cell
	var nFieldInCellCnt;

	//Object Array to save the Field Location Information
	var arrFieldPosition = [];

	//Row Size without the Label Area
	var nRealRowSize;

	//Label Width
	var nLabelWidth;

	//Check Quantity with Field List connected to Cell
	var nFieldInCellCnt = arrFieldInCellList.length;

	//If the Component Production Direction is Horizontal
	//Choose Array, as the x-coordinate for each row is different
	//Choose Number, as the y-coordinate for each column is identical
	if(sDirection=="horizontal")
	{
		var arrAlignX = [];
		var nAlignY;
	}
	//If the Component Production Direction is Vertical
	//Choose Number, as the x-coordinate for each row is identical
	//Choose Array, as the y-coordinate for each column is different
	else
	{
		var nAlignX;
		var arrAlignY = [];
	}

	for(var i=0;i<nFieldInCellCnt;i++)
	{
		//Import Field Information registered on the Model based on the Fields connected to the Cell
		sFieldId =  arrFieldInCellList[i];
		oField = arrFieldList.filter(arrFieldList=>arrFieldList.id==sFieldId)[0];
		
		if (this.lfn_IsNull(oField))	continue;

		//Import Label Width Information set on the first Field
		if(i==0)
		{
			nLabelWidth = nexacro.toNumber(oField.labelwidth);
			nLabelHeight = nexacro.toNumber(oField.labelheight);

			arrLabelPadding = oField.labelpadding.split(" ");
			nLabelWidthPadding = nexacro.toNumber(arrLabelPadding[3]) + nexacro.toNumber(arrLabelPadding[1]);
			nLabelHeightPadding = nexacro.toNumber(arrLabelPadding[0]) + nexacro.toNumber(arrLabelPadding[2]);

			nRealColSize = nColSize - nLabelWidth - nLabelWidthPadding;
		}

		arrCompPadding = oField.comppadding.split(" ");
		nCompWidthPadding = nexacro.toNumber(arrCompPadding[3]) + nexacro.toNumber(arrCompPadding[1]);
		nCompHeightPadding = nexacro.toNumber(arrCompPadding[0]) + nexacro.toNumber(arrCompPadding[2]);

		//Evaluate Width/Height that this field will be expressed on
		nCompWidth = this.lfn_GetRealSize(oField.compwidth, 0, nRealColSize, this.COMP_WIDTH, 0, nCompWidthPadding);
		nCompHeight = this.lfn_GetRealSize(oField.compheight, 0, nRowSize, this.COMP_HEIGHT, 0, nCompHeightPadding);

		//If the Component Production Direction is Horizontal
		if(sDirection=="horizontal")
		{
			nTempComp = nLeft + nCompWidth + nCompWidthPadding;

			if(nRealColSize<nTempComp)
			{
				nLeft = 0;
				nTop = nMaxHeight;
				nColIdx = 0;
				nRowIdx++;
			}
		}
		//If the Component Production Direction is Vertical
		else
		{
			nTemp = nTop + nCompHeight + nCompHeightPadding;
			if(nRowSize<nTemp)
			{
				nLeft = nMaxWidth;
				nTop = 0;
				nColIdx++;
				nRowIdx = 0;
			}
		}

		arrFieldPosition[i] =
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"labelwidth" : nLabelWidth,
			"labelheight" : nLabelHeight,
			"labelpadding" : arrLabelPadding,
			"compwidth" : nCompWidth,
			"compheight" : nCompHeight,
			"comppadding" : arrCompPadding,
			"alignx" : 0,
			"aligny" : 0,
			"colidx" : nColIdx,
			"rowidx" : nRowIdx,
			"colsize" : nColSize,
			"rowsize" : nRowSize
		};

		if(sDirection=="horizontal")
		{
			nLeft = nLeft + nCompWidth + nCompWidthPadding;
			nColIdx++;

			nHeight = nTop + nCompHeight + nCompHeightPadding;

			if(nHeight>nMaxHeight)nMaxHeight = nHeight;
		}
		else
		{
			nTop = nTop + nCompHeight + nCompHeightPadding;
			nRowIdx++;

			nWidth = nLeft + nCompWidth + nCompWidthPadding;

			if(nWidth>nMaxWidth)nMaxWidth = nWidth;
		}
	}

	return arrFieldPosition;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcField
 * Parameter    :
				- sDirection : 컴포넌트 생성 방향
				- sVAlign : 컴포넌트 수직 정렬 방식(top|middle|bottom)
				- sHAlign : 컴포넌트 수평 정렬 방식(left|center|right)
				- nColSize : 표현할 Cell의 Width
				- nRowSize : 표현할 Cell의 Height
 * Return       : arrFieldPosition : Field의 위치정보가 담긴 Object Array
 * Description  : 표현될 Field의 위치값을 구하는 함수
 *---------------------------------------------------------------------------------------------*/
fn_CalcField = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize)
{
	var nLeft = 0;
	var nTop = 0;
	var nLabelWidth, nLabelHeight, nCompWidth, nCompHeight;
	var arrLabelPadding, arrCompPadding;
	var nLabelWidthPadding, nLabelHeightPadding, nCompWidthPadding, nCompHeightPadding
	var nColIdx = nRowIdx = 0;
	var nHeight = nWidth = 0;
	var nMaxWidth = nMaxHeight = 0;

	var nStartX, nStartY;
	var nEndX, nEndX;

	var nTemp, nTempLabel, nTempComp;

	//Import Field List Registered to the Model
	var arrFieldList = this.oUseFieldArray.fields;

	//Object Array to save the Field Location Information
	var arrFieldPosition = [];

	//Check Quantity with Field List connected to Cell
	var nFieldInCellCnt = arrFieldList.length;

	for(var i=0; i<nFieldInCellCnt; i++)
	{
		oField = arrFieldList[i];
		sFieldId = oField.id;
		nLabelWidth = nexacro.toNumber(oField.labelwidth);
		nLabelHeight = nexacro.toNumber(oField.labelheight);
		arrLabelPadding = oField.labelpadding.split(" ");
		arrCompPadding = oField.comppadding.split(" ");

		nLabelWidthPadding = nexacro.toNumber(arrLabelPadding[3]) + nexacro.toNumber(arrLabelPadding[1]);
		nLabelHeightPadding = nexacro.toNumber(arrLabelPadding[0]) + nexacro.toNumber(arrLabelPadding[2]);

		nCompWidthPadding = nexacro.toNumber(arrCompPadding[3]) + nexacro.toNumber(arrCompPadding[1]);
		nCompHeightPadding = nexacro.toNumber(arrCompPadding[0]) + nexacro.toNumber(arrCompPadding[2]);

		nCompWidth = this.lfn_GetRealSize(oField.compwidth, nLabelWidth, nColSize, this.COMP_WIDTH, nLabelWidthPadding, nCompWidthPadding);
		nCompHeight = this.lfn_GetRealSize(oField.compheight, 0, nRowSize, this.COMP_HEIGHT, 0, nCompHeightPadding);

		if(sDirection=="horizontal")
		{
			if(nLabelWidth==0)
			{
				nTemp = nLeft + nCompWidth + nCompWidthPadding;
			}else
			{
				nTemp = nLeft + nLabelWidth + nLabelWidthPadding + nCompWidth + nCompWidthPadding;
			}

			if(nColSize<nTemp)
			{
				nLeft = 0;
				nTop = nMaxHeight;
				nColIdx = 0;
				nRowIdx++;
			}
		}
		else
		{
			nTempLabel = nTop + nLabelHeight + nLabelHeightPadding;
			nTempComp =  nTop + nCompHeight + nCompHeightPadding;
			
			if(nTempLabel>nTempComp)nTemp = nTempLabel;
			else nTemp = nTempComp;

			if(nRowSize<nTemp)
			{
				nLeft = nMaxWidth;
				nTop = 0;
				nColIdx++;
				nRowIdx = 0;
			}
		}

		arrFieldPosition[i] =
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"labelwidth" : nLabelWidth,
			"labelheight" : nLabelHeight,
			"labelpadding" : arrLabelPadding,
			"compwidth" : nCompWidth,
			"compheight" : nCompHeight,
			"comppadding" : arrCompPadding,
			"alignx" : 0,
			"aligny" : 0,
			"colidx" : nColIdx,
			"rowidx" : nRowIdx,
			"colsize" : nColSize,
			"rowsize" : nRowSize
		};

		if(sDirection=="horizontal")
		{
			nTemp = nLeft + nLabelWidth + nLabelWidthPadding + nCompWidth + nCompWidthPadding;

			nColIdx++;

			nLeft = nTemp;

			nTempLabel = nTop + nLabelHeight + nLabelHeightPadding;
			nTempComp =  nTop + nCompHeight + nCompHeightPadding;

			if(nTempLabel>nTempComp)nHeight = nTempLabel;
			else nHeight = nTempComp;

			if(nHeight>nMaxHeight)nMaxHeight = nHeight;
		}
		else
		{
			nTempLabel = nTop + nLabelHeight + nLabelHeightPadding;
			nTempComp =  nTop + nCompHeight + nCompHeightPadding;

			if(nTempLabel>nTempComp)nTop = nTempLabel;
			else nTop = nTempComp;

			nRowIdx++;

			nTemp = nLeft + nLabelWidth + nLabelWidthPadding + nCompWidth + nCompWidthPadding;
			nWidth = nTemp;

			if(nWidth>nMaxWidth)nMaxWidth = nWidth;
		}
	}

	//Return Field Location Information
	return arrFieldPosition;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeCompByLayout
 * Parameter    :
				- oLayout : 레이아웃 설정 정보
 * Return       :
 * Description  : Layout 기반 컴포넌트 생성 함수
 *---------------------------------------------------------------------------------------------*/
fn_MakeCompByLayout = function(oLayout)
{
	//레이아웃에 설정된 CellList 정보
	var arrCellList = oLayout.celllist;

	//레이아웃에 설정된 ColumnSize 정도
	var arrColSize = oLayout.columnsize;

	//레이아웃에 설정된 RowSize 정보
	var arrRowSize = oLayout.rowsize;

	//Column/Row 디폴트 사이즈 가져오기
	var nColSizeDef = oLayout.colsizedef;
	var nRowSizeDef = oLayout.rowsizedef;

	var nCol, nRow, nColSpan, nRowSpan;
	var sDirection, sVAlign, sHAlign;
	var nWidth;
	var nHeight;

	var oCell;
	var oStatic;

	var bStartCol;
	var bEndRow;

	for(var i=0;i<arrCellList.length;i++)
	{
		oCell = arrCellList[i];
		sDirection = oCell.direction
		nCol = nexacro.toNumber(oCell.col);
		nRow = nexacro.toNumber(oCell.row);
		nColSpan = nexacro.toNumber(oCell.colspan);
		nRowSpan = nexacro.toNumber(oCell.rowspan);

		//Col/RowSpan 값이 없을 경우 1로 초기화
		if(!nColSpan)nColSpan = 1;
		if(!nRowSpan)nRowSpan = 1;

		//Cell에 Field가 없을 경우 continue
		if(!oCell.fieldlist)continue;

		//현재 Cell의 Left/Top 위치값 가져오기
		nLeft = this.lfn_GetCellSize(arrColSize, 0, nCol, nColSizeDef) + this.VIEW_PADDING_LEFT;
		nTop = this.lfn_GetCellSize(arrRowSize, 0, nRow, nColSizeDef) + this.VIEW_PADDING_TOP;

		if(nCol==0)bStartCol = true;
		else bStartCol = false;

		fn_MakeComp(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition, true, nRow, bStartCol);
	}
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeComp
 * Parameter    :
				- nBaseLeft : 컴포넌트를 생성할 기준 좌표(Left)
				- nBaseTop : 컴포넌트를 생성할 기준 좌표(Top)
				- nBaseWidth : 컴포넌트를 생성할 기준 좌표(Width)
				- nBaseHeight : 컴포넌트를 생성할 기준 좌표(Height)
				- sDirection : 컴포넌트 생성 방향
				- arrFieldPosition : Field의 위치정보가 담긴 Object Array
				- bUseLayout : 레이아웃 사용 여부
				- nLayoutRow : 레이아웃 기준 현재 Row Index
				- bStartCol : 레이아웃 기준 첫번째 Col Index인지 여부
 * Return       :
 * Description  : 컴포넌트 태그 생성 함수
 *---------------------------------------------------------------------------------------------*/
fn_MakeComp = function(nBaseLeft, nBaseTop, nBaseWidth, nBaseHeight, sDirection, arrFields, bUseLayout, nLayoutRow, bStartCol)
{
	var nLabelLeft, nLabelTop, nLabelWidth, nLabelHeight;
	var nCompLeft, nCompTop, nCompWidth, nCompHeight, nCompBgWidth;
	var nPosLeft, nPosTop, nPosWidth, nPosHeight;
	var nLabelAreaWidth;

	var oAlignPos;
	var sFieldId;
	var oField;
	var oFieldPosition;
	var nRowIdx, nColIdx;
	var nRowSize, nColSize;
	var nAlignX, nAlignY;

	var oModel = this.oContents.View.Model;
	var sCompId;
	var sCompClassId;
	var oCompClass;
	var oLabelClass			= this.lfn_GetCompClass(this.LABEL_TYPE);
	var oCompBgClass		= this.lfn_GetCompClass(this.COMP_BG_TYPE);
	var sCompCssClass;
	var sLabelCssClass;
	var sLabelText;
	var sFieldBgCssClass = this.COMP_BG_CSSCLASS;
	
	// FieldBox 사용여부
	var sUseFieldBox = this.oGenerationAttr.attributes.usefieldbox;

	if(!bUseLayout)bUseLayout = false;

	//If using Layout
	if(bUseLayout==true)
	{
		for(var i=0;i<arrFields.length;i++)
		{
			//Import Field Object
			oFieldPosition = arrFields[i];
			sFieldId = oFieldPosition.fieldid;
			oField = this.oUseFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
			
			if (this.lfn_IsNull(oField))	continue;

			//Import Component Naming Rules
			oCompClass = this.lfn_GetCompClass(oField.comptype, oField);

			//Import Component Css Class Id Value
			sCompCssClass = oField.cssclass;

			//Import Label Css Class Id Value
			sLabelCssClass = oField.required == "true" ? this.LABEL_REQUIRED_CSSCLASS : oField.labelcssclass;

			sLabelText = oField.label;

			//Import Row/Col Index where the Field will be located
			nRowIdx = oFieldPosition.rowidx;
			nColIdx = oFieldPosition.colidx;

			nRowSize = oFieldPosition.rowsize;
			nColSize = oFieldPosition.colsize;

			//Import Align Location Information of the Field
			nAlignX = oFieldPosition.alignx;
			nAlignY = oFieldPosition.aligny;

			if(i==0)
			{
				nLabelLeft = nBaseLeft + oFieldPosition.left + 	nexacro.toNumber(oFieldPosition.labelpadding[3]);
				nLabelTop = nBaseTop + oFieldPosition.top + nexacro.toNumber(oFieldPosition.labelpadding[0]);
				nLabelWidth = oFieldPosition.labelwidth;
				nLabelHeight = nexacro.toNumber(nBaseHeight);
			}

			nCompLeft = nLabelLeft + nLabelWidth + oFieldPosition.left + nexacro.toNumber(oFieldPosition.labelpadding[1]) + nexacro.toNumber(oFieldPosition.comppadding[3]);
			nCompTop = nBaseTop + oFieldPosition.top + nexacro.toNumber(oFieldPosition.comppadding[0]);

			nCompWidth = oFieldPosition.compwidth;
			nCompHeight = oFieldPosition.compheight;

			//레이블 위/아래 사이 간격이 겹치게 표현되야 하므로
			//첫번째 Row가 아닐 경우 Top 값을 -1px
			nLabelTop = nLabelTop - (nLayoutRow * 1);
			nCompTop = nCompTop - (nLayoutRow * 1);

			oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};

			//첫번째 레이블이고 레이블 Width가 0이 아니면 레이블 태그 추가
			if(i==0)
			{

				if(bStartCol==true && sUseFieldBox == "true")
				{
					//nCompBgWidth = this.oContents.View.referenceinfo.realwidth;
					
					//필드 배경 Static 추가
					sCompId = this.lfn_GetCompId(oCompBgClass.prefix + "_" + sFieldId + "_" + "Bg");
					oComp = {
								"tag" : oCompBgClass.classId,
								"attribute" :
								{
									"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "right" : 0, "height" : nLabelHeight
									,"cssclass" : sFieldBgCssClass
								}
							};
					oModel[oModel.length-1].Components.push(oComp);
				}

				if(nLabelWidth>0)
				{
					sCompId = this.lfn_GetCompId(oLabelClass.prefix + "_" + sFieldId + "_" + "Label");
					oComp = {
								"tag" : oLabelClass.classId,
								"attribute" :
								{
									"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nLabelWidth, "height" : nLabelHeight
									, "text" : sLabelText, "cssclass" : sLabelCssClass
								}
							};
					oModel[oModel.length-1].Components.push(oComp);
				}
			}

			sCompId = this.lfn_GetCompId(oCompClass.prefix + "_" + sFieldId);
			sCompClassId = oCompClass.classId;
			oComp =	{
						"tag" : sCompClassId,
						"attribute" :
						{
							"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "cssclass" : sCompCssClass
						}
					};
					
			if(sCompClassId=="Button" || sCompClassId=="CheckBox" || sCompClassId=="Static")
			{
				oComp.attribute.text = oField.label;
			}

			if(sCompClassId=="Radio")
			{
				oComp.attribute.direction = "vertical";
			}

			if(sCompClassId!="Button")
			{
				this.arrBindItems[this.arrBindItems.length] = {"compid" : sCompId, "fieldid" : sFieldId, "comptype" : oField.comptype, "compclassid" : sCompClassId};
			}
			
			oModel[oModel.length-1].Components.push(oComp)
		}
	}
	//If Layout is not used
	else
	{
		for(var i=0;i<arrFields.length;i++)
		{
			//Import Field Object
			oFieldPosition = arrFields[i];
			sFieldId = oFieldPosition.fieldid;
			oField = this.oUseFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
			
			if (this.lfn_IsNull(oField))	continue;

			//Import Component Naming Rules
			oCompClass = this.lfn_GetCompClass(oField.comptype, oField);

			//Import Component Css Class Id Value
			sCompCssClass = oField.cssclass;

			//Import Label Css Class Id Value
			sLabelCssClass = oField.required == "true" ? this.LABEL_REQUIRED_CSSCLASS : oField.labelcssclass;

			sLabelText = oField.label;

			//Import Row/Col Index where the Field will be located
			nRowIdx = oFieldPosition.rowidx;
			nColIdx = oFieldPosition.colidx;

			nRowSize = oFieldPosition.rowsize;
			nColSize = oFieldPosition.colsize;

			//Import Align Location Information of the Field
			nAlignX = oFieldPosition.alignx;
			nAlignY = oFieldPosition.aligny;

			nLabelLeft = nBaseLeft + oFieldPosition.left + 	nexacro.toNumber(oFieldPosition.labelpadding[3]);
			nLabelTop = nBaseTop + oFieldPosition.top + nexacro.toNumber(oFieldPosition.labelpadding[0]);
			nLabelWidth = oFieldPosition.labelwidth;
			nLabelHeight = oFieldPosition.labelheight;

			nCompLeft = nLabelLeft + nLabelWidth + nexacro.toNumber(oFieldPosition.labelpadding[1]) + nexacro.toNumber(oFieldPosition.comppadding[3]);
			nCompTop = nBaseTop + oFieldPosition.top + nexacro.toNumber(oFieldPosition.comppadding[0]);

			nCompWidth = oFieldPosition.compwidth;
			nCompHeight = oFieldPosition.compheight;

			//레이블 위/아래 사이 간격이 겹치게 표현되야 하므로
			//첫번째 Row가 아닐 경우 Top 값을 -1px
			nLabelTop = nLabelTop - (nRowIdx * 1);
			nCompTop = nCompTop - (nRowIdx * 1);

			oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};

			if(nColIdx==0 && sUseFieldBox == "true")
			{
				nCompBgWidth = nColSize;
				
				//필드 배경 Static 추가
				sCompId = this.lfn_GetCompId(oCompBgClass.prefix + "_" + sFieldId + "_" + "Bg");
				oComp = {
							"tag" : oCompBgClass.classId,
							"attribute" :
							{
								"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "right" : 0, "height" : nLabelHeight
								,"cssclass" : sFieldBgCssClass
							}
						};
				oModel[oModel.length-1].Components.push(oComp);
			}

			if(nLabelWidth>0)
			{
				sCompId = this.lfn_GetCompId(oLabelClass.prefix + "_" + sFieldId + "_" + "Label");
				oComp = {
							"tag" : oLabelClass.classId,
							"attribute" :
							{
								"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nLabelWidth, "height" : nLabelHeight
								, "text" : sLabelText, "cssclass" : sLabelCssClass
							}
						};
				oModel[oModel.length-1].Components.push(oComp);
			}

			sCompId = this.lfn_GetCompId(oCompClass.prefix + "_" + sFieldId);
			sCompClassId = oCompClass.classId;
			oComp =	{
						"tag" : sCompClassId,
						"attribute" :
						{
							"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "cssclass" : sCompCssClass
						}
					};
					
			if(sCompClassId=="Button" || sCompClassId=="CheckBox" || sCompClassId=="Static")
			{
				oComp.attribute.text = oField.label;
			}

			if(sCompClassId=="Radio")
			{
				oComp.attribute.direction = "vertical";
			}

			if(sCompClassId!="Button")
			{
				this.arrBindItems[this.arrBindItems.length] = {"compid" : sCompId, "fieldid" : sFieldId, "comptype" : oField.comptype, "compclassid" : sCompClassId};
			}

			oModel[oModel.length-1].Components.push(oComp)
		}
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function(){

    var oInitValue = [];

    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function()
{
    //Initialize Object
	var oObjects = [];

	var oViewDataset = this.lfn_GetDataset("viewdataset", this.oFieldArray, 1);

	//Object Information Setting
	oObjects.push(oViewDataset);

	// InnerDataset 정보
	var oInner = this.lfn_GetInnerDataset(this.oUseFieldArray);

	oObjects = oObjects.concat(oInner);

	//Return Object Information
	return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetBind
 * Return       : bind contents (JSON format)
 * Description  : Function to generate <Bind> source
 *---------------------------------------------------------------------------------------------*/
fn_GetBind = function()
{
	var oBind = this.lfn_GetBindItem("viewdataset", this.arrBindItems);

    return oBind;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function()
{
    var oScript = {};
	var sScript = "";
	
	var sViewNm = this.oContents.View.attribute.id;
	var sUseExpandButton	= this.oGenerationAttr.attributes.useexpandbutton;		// expand 토글버튼 사용여부 및 초기값
	
	if (sUseExpandButton != "none")
	{
		sScript = this.lfn_GetTitleScript(sViewNm, sUseExpandButton);
	}
	
    if (this.lfn_IsNotNull(sScript))
	{
		sScript = nexacro.replaceAll(sScript,"\t","");
		
		oScript =
		{
			"tag": "Script",
			"attribute": { "type" : "xscript5.1" },
			"value": sScript
		}
	};

    return oScript;
};]]></Script>
</ViewTemplateInfo>
