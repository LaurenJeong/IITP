<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[/******************************************************************************
*  ViewTemplate
*  @FileName 	maintain.xjs
*  @Creator
*  @CreateDate
*  @Desction    View Contents 유지관련 함수
*******************************************************************************/
//--------------------------------------------------------------------------------------------------------
// View 객체 값 유지관련 상수
//--------------------------------------------------------------------------------------------------------	
this.oAttrViewContentsMaintain =	{
									"id": "viewcontentsmaintain",
									"edittype": "Boolean",
									"defaultvalue": "true",
									"description": "View 컴포넌트 유지 여부"
												+ "\n" + "ViewTemplate에서 설정하지 않은 속성 일부를 유지시켜 줍니다."
												+ "\n" + "(※주의 - View 객체의 속성이 모두 유지되지 않습니다.)"
								};

//--------------------------------------------------------------------------------------------------------
// 공통함수
//--------------------------------------------------------------------------------------------------------
/**
 * @class Object에 속성값을 체크하여 없는경우 지정한 값을 리턴
 * @param {Object} oObject - 체크 할 대상 Object
 * @param {String} sProperty - 체크 할 대상 Property 명
 * @param {String} nullVal	- Null인경우 대치값
 * @return {String} 속성값이 Null인경우 지정한값, Null이 아닌경우 속성값
 */
this.lfn_NvlProperty = function(oObject, sProperty, nullVal)
{
	var ret;
	
	try 
	{
		// Property 값이 있는 경우 Property 반환
		if(this.lfn_IsNotNull(oObject) && oObject.hasOwnProperty(sProperty)) {
			ret = oObject[sProperty];
		}
		
		// Null인 경우 nullVal값 반환
		if(this.lfn_IsNull(ret)) {
			ret = nullVal;
		}
	}
	catch (e) 
	{
		return ret;
	}
	
	return ret;
};

/**
 * @class 기존 Contents 유지 할지 여부 반환
 * @param {Boolean} bMaintain - 체크용 값(입력하지 않은 경우 this.oGenerationAttr.attributes.viewcontentsmaintain 사용)
 * @return {Boolean} Contents 유지 할지 여부
 */
this.lfn_GetUseOrgViewContents = function(bMaintain)
{
	if (this.lfn_IsNull(bMaintain))		bMaintain = this.oGenerationAttr.attributes.viewcontentsmaintain;
	
	var bUse = false;
	
	if (bMaintain == true || bMaintain == "true")			bUse = true;
	
	return bUse;
};

/**
 * @class Contents에서 해당하는 Contents 반환
 * @param {Object} oTarget - 대상 Contents Object
 * @param {String} sElem - 부모 Property 명
 * @param {String} sKey	- 체크 할 Property 명
 * @param {String} sValue - 체크 할 Property 값
 * @return {Object} Contents
 */
this.lfn_GetObjectContents = function(oTarget, sElem, sKey, sValue)
{
	var oObject;
	var oContents;
	
	if (this.lfn_IsNotNull(oTarget))
	{
		if (this.lfn_IsNotNull(sElem)) {
			oObject = oTarget[sElem];
		} else {
			oObject = oTarget;
		}
		
		oContents = this.lfn_GetMatchObject(oObject, sKey, sValue);
	}
	
	return oContents;
};

/**
 * @class Object에 해당하는 Contents 반환
 * @param {Object} oObject - 대상 Object
 * @param {String} sKey	- 체크 할 Property 명
 * @param {String} sValue - 체크 할 Property 값
 * @return {Object} Contents
 */
this.lfn_GetMatchObject = function(oObject, sKey, sValue)
{
	var oRet;
	
	if (Array.isArray(oObject)) {
		oRet = oObject.find(oObject => oObject[sKey]==sValue || (oObject.hasOwnProperty("attribute") && oObject.attribute[sKey]==sValue));
	} else if (oObject instanceof Object) {
		for(var elem in oObject){
			if (elem == sKey && oObject[elem] == sValue)
			{
				oRet = oObject;
				break;
			}
			else if (oObject[elem][sKey] == sValue)
			{
				oRet = oObject[elem];
				break;
			}
		}
	}
	
	return oRet;
};

/**
 * @class 사용자가 직접 추가한 컴포넌트 Contents를 반환
 * @param {Boolean} bMaintain - Contents값 유지여부
 * @return {Object} Contents
 */
this.lfn_GetUserCompContents = function(bMaintain)
{
	if (this.lfn_IsNull(bMaintain))		bMaintain = this.oGenerationAttr.attributes.viewcontentsmaintain;
	
	var oModelOrg;
	var oCompField;
	
	// Contents값 유지여부 설정값 체크
	if (this.lfn_GetUseOrgViewContents())
	{
		oModelOrg = this.oContentsOrg.View.Model;
		oCompField = oModelOrg.find(oModelOrg=>oModelOrg.fieldid=="");
	}
	
	return oCompField;
};

/**
 * @class 기존 ViewContents에서 동일한 컴포넌트 Contents 반환
 * @param {string} sFieldId - Model Field ID
 * @param {string} sTag - Component Class ID
 * @param {string} sId - Component ID
 * @param {Boolean} bMaintain - Contents값 유지여부
 * @return {Object} Component Contents
 */
this.lfn_GetCompContents = function(sFieldId, sTag, sId, bMaintain)
{
	if (this.lfn_IsNull(bMaintain))		bMaintain = this.oGenerationAttr.attributes.viewcontentsmaintain;
	
	var oCompField;
	var oCompField;
	var oComp;
	
	// Contents값 유지여부 설정값 체크
	if (this.lfn_GetUseOrgViewContents())
	{
		oModelOrg = this.oContentsOrg.View.Model;
		oCompField = oModelOrg.find(oModelOrg=>oModelOrg.fieldid==sFieldId);
	}
	
	// ID에 매칭하는 컴포넌트 정보 반환
	oComp = this.lfn_GetObjectContents(oCompField, "Components", "id", sId);
	
	// 매칭되는 정보가 없거나 컴포넌트가 변경된 경우 초기화
	if (this.lfn_IsNull(oComp) || oComp["tag"] != sTag) {
		oComp =	{
					"tag" : sTag,
					"attribute" : {"id" : sId}
				};
	}
	
	return oComp;
};

/**
 * @class 기존 ViewContents에서 동일한 Cell Contents 반환
 * @param {Object} oBandContents - Band Contents
 * @param {String} sId - Cell ID
 * @param {Number} nCol - 사용자가 입력한 정보인 경우 Column Index
 * @param {Number} nRow - 사용자가 입력한 정보인 경우 Row Index
 * @param {Boolean} bMaintain - Contents값 유지여부
 * @return {Object} Cell Contents
 */
this.lfn_GetCellContents = function(oBandContents, sId, nCol, nRow, bMaintain)
{
	if (this.lfn_IsNull(bMaintain))		bMaintain = this.oGenerationAttr.attributes.viewcontentsmaintain;
	
	var oCell;
	var oBandCells;
	
	// Contents값 유지여부 설정값 체크
	if (this.lfn_GetUseOrgViewContents())
	{
		if (this.lfn_IsNotNull(oBandContents))
		{
			// 1) ID에 매칭하는 Cell 정보 반환
			if (this.lfn_IsNotNull(sId)) {
				oCell = this.lfn_GetObjectContents(oBandContents, "Band", "id", sId);
			}
			
			// 2) 사용자가 입력한 정보인 경우 col, row로 찾기
			if (this.lfn_IsNull(oCell)) {
				oBandCells = oBandContents["Band"];
				
				oCell = oBandCells.find((oBandCells.attribute.hasOwnProperty("col") && oBandCells.attribute["col"]==nCol)
										&& (oBandCells.attribute.hasOwnProperty("row") && oBandCells.attribute["row"]==nRow));
			}
		}
	}
	// 3) 해당하는 정보가 없는 경우 빈 Cell정보 반환
	if (this.lfn_IsNull(oCell)) {
		oCell = {
					"tag" : "Cell",
					"attribute" : {}
				};
	}
	
	if (this.lfn_IsNotNull(sId))	oCell.attribute["id"]	= sId;
	if (this.lfn_IsNotNull(nCol))	oCell.attribute["col"]	= nCol;
	if (this.lfn_IsNotNull(nRow))	oCell.attribute["row"]	= nRow;
	
	return oCell;
};


/**
 * @class 기존 ViewContents에서 Chart Contents 반환
 * @param {Object} oChartContents - Chart Contents
 * @param {string} oBaseContents - 기존 데이터 없을때 기본 Contents
 * @param {string} sId - oChartContents에서 Sub Contents ID
 * @return {Object} Chart Sub Contents
 */
this.lfn_GetChartContents = function(oChartContents, oBaseContents, sElem, sValue, bMaintain)
{
	if (this.lfn_IsNull(sValue))		sValue = oBaseContents["id"];
	if (this.lfn_IsNull(bMaintain))			bMaintain = this.oGenerationAttr.attributes.viewcontentsmaintain;
    
	var oObject;
	var oContents;
    
	// Contents값 유지여부 설정값 체크
    if (this.lfn_GetUseOrgViewContents())
    {
        if (this.lfn_IsNotNull(oChartContents))
        {
			if (this.lfn_IsNotNull(sElem)) {
				oObject = oChartContents[sElem];
			} else {
				oObject = oChartContents;
			}
		
            oContents = this.lfn_GetMatchObject(oObject, "id", sValue);
        }
    }
    
    if (this.lfn_IsNull(oContents))
    {
        oContents = this.lfn_CloneObject(oBaseContents);
    }
    
    return oContents;
};

/**
 * @class 사용자가 직접 추가한 Chart Element Contents를 반환(fieldid가 없는 경우를 직접 입력한 값으로 구분함)
 * @param {Object} oChartContents - Chart Contents
 * @param {string} sTag - oChartContents에서 Sub Contents ID
 * @param {Boolean} bMaintain - Contents값 유지여부
 * @return {Object} Contents
 */
this.lfn_GetUserCompChartContents = function(oChartContents, sTag, bMaintain)
{
    if (this.lfn_IsNull(bMaintain))        bMaintain = this.oGenerationAttr.attributes.viewcontentsmaintain;
    
    var aAllContents;
    var aUserContents;
    
	// Contents값 유지여부 설정값 체크
    if (this.lfn_GetUseOrgViewContents())
    {
        if (this.lfn_IsNotNull(oChartContents) && this.lfn_IsNotNull(sTag))
        {
            aAllContents = oChartContents[sTag];
            aUserContents = aAllContents.filter(oContents => oContents.hasOwnProperty("fieldid") == false);
        }
    }
    
    return aUserContents;
};]]></Script>
